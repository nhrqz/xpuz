{"version":3,"sources":["../../src/parsers/jpz.js"],"names":["isObject","require","Promise","Puzzle","_parsePuzzle","puzzle","resolve","reject","Error","JPZParser","exports","module"],"mappings":";;;;AAAA;;;;;;;AAOA,IAAMA,WAAkBC,QAAQ,iBAAR,CAAxB;AACA,IAAMC,UAAkBD,QAAQ,UAAR,CAAxB;AACA,IAAME,SAAkBF,QAAQ,WAAR,CAAxB;;AAGA,SAASG,YAAT,CAAsBC,MAAtB,EAA8B;AAC7B,QAAO,IAAIH,OAAJ,CACN,UAACI,OAAD,EAAUC,MAAV,EAAqB;AACpB,MAAIP,SAASK,MAAT,CAAJ,EAAsB;AACrB,UAAOC,QAAQ,IAAIH,MAAJ,CAAWE,MAAX,CAAR,CAAP;AACA,GAFD,MAGK;AACJ,UAAOE,OAAO,IAAIC,KAAJ,CAAU,mDAAV,CAAP,CAAP;AACA;AACD,EARK,CAAP;AAUA;;AAED;;;;IAGMC,S;;;;;;;;AACL;;;;;;;;;wBASMJ,M,EAAQ;AACb,UAAOD,aAAaC,MAAb,CAAP;AACA;;;;;;AAGFK,UAAUC,OAAOD,OAAP,GAAiBD,SAA3B","file":"jpz.js","sourcesContent":["/**\n * JPZ Parser\n *\n * @description Parses .jpz formatted puzzles (NOT CURRENTLY IMPLEMENTED)\n * @module xpuz/parsers/jpz\n */\n\nconst isObject        = require(\"lodash/isObject\");\nconst Promise         = require(\"bluebird\");\nconst Puzzle          = require(\"../puzzle\");\n\n\nfunction _parsePuzzle(puzzle) {\n\treturn new Promise(\n\t\t(resolve, reject) => {\n\t\t\tif (isObject(puzzle)) {\n\t\t\t\treturn resolve(new Puzzle(puzzle));\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn reject(new Error(\"parse() expects either a path string or an object\"));\n\t\t\t}\n\t\t}\n\t);\n}\n\n/**\n * JPZ parser class\n */\nclass JPZParser {\n\t/**\n\t * Parses a {@link module:xpuz/puzzle~Puzzle} from the input\n\t *\n\t * @param {string|object} puzzle - the source to parse the puzzle from; if a string,\n\t *\tit is assumed to be a file path, if an object, it defines a Puzzle object\n\t *\n\t * @return {external:Promise<module:xpuz/puzzle~Puzzle>} a promise that resolves with\n\t *\tthe parsed puzzle object\n\t */\n\tparse(puzzle) {\n\t\treturn _parsePuzzle(puzzle);\n\t}\n}\n\nexports = module.exports = JPZParser;\n"]}