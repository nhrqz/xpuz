{"version":3,"sources":["../../src/parsers/puz.js"],"names":["map","require","get","range","reverse","zip","each","reduce","flatten","padStart","chunk","findKey","compact","size","iconv","PUZReader","Puzzle","BLOCK_CELL_VALUE","BLOCK_CELL_VALUE_REGEX","EXTENSION_HEADER_LENGTH","HEADER_CHECKSUM_BYTE_LENGTH","MAGIC_CHECKSUM_BYTE_LENGTH","UNKNOWN1_BYTE_LENGTH","UNKNOWN2_BYTE_LENGTH","CHECKSUM_BUFFER_LENGTH","NUMBER_OF_CLUES_BUFFER_LENGTH","PUZZLE_TYPE_BUFFER_LENGTH","SOLUTION_STATE_BUFFER_LENGTH","HEADER_BUFFER_LENGTH","EXTENSION_LENGTH_BUFFER_LENGTH","EXTENSION_NAME_LENGTH","PUZZLE_KEY_LENGTH","RTBL_KEY_PADDING_WIDTH","PUZZLE_TYPE","Normal","Diagramless","SOLUTION_STATE","Unlocked","Locked","CELL_STATES","PreviouslyIncorrect","CurrentlyIncorrect","AnswerGiven","Circled","ATOZ","MINIMUM_KEY_VALUE","MAXIMUM_KEY_VALUE","_doChecksum","buffer","cksum","i","length","lowbit","readUInt8","_readHeader","reader","options","data","globalChecksum","_readUInt16","_seek","current","headerChecksum","magicChecksum","_readValues","version","_readString","unknown1","scrambledChecksum","unknown2","width","_readUInt8","height","numberOfClues","puzzleType","solutionState","solutionKey","Error","_processExtension","extension","name","board","b","rebus_solutions","decode","ENCODING","split","solutions","solutionPair","pair","parseInt","timings","timing","elapsed","running","cell_states","user_rebus_entries","entry","_readExtension","checksum","slice","_parseEnd","remainingLength","tell","extensions","_parseExtensions","puzzleData","grid","cell","index","c","GRBS","rebusSolution","RTBL","solution","RUSR","forEach","rusr","y","Math","floor","header","x","_extensions","_readClues","clues","push","_generateGridAndClues","answers","clueList","_isBlockCell","across","down","clueCount","clueListIndex","row","isBlockCell","clueNumber","_pluckSolutions","_flattenSolution","join","_unflattenSolution","_textChecksum","title","encode","author","copyright","clue","notes","_headerChecksum","Buffer","writeUInt8","writeUInt16LE","_globalChecksum","answer","_magicChecksum","answerChecksum","solutionChecksum","textChecksum","MAGIC_CHECKSUM_STRING","charCodeAt","_transposeGrid","gridString","match","RegExp","r","_restoreSolution","s","t","arr","shift","_shift","str","key","letterIndex","indexOf","Number","_unshift","k","_everyOther","_unshuffle","substring","_unscrambleString","len","_shuffle","mid","chars","_scrambleString","_scrambledChecksum","transposed","replace","_validateChecksums","checksums","global","magic","errors","equals","_scrambleSolution","solutionGrid","solutionString","_unscrambleSolution","result","_writeHeader","globalChecksumBuffer","headerChecksumBuffer","magicChecksumBuffer","scrambledChecksumBuffer","unscrambledAnswer","fill","numberOfCluesBuffer","puzzleTypeBuffer","solutionStateBuffer","concat","_writeExtension","extensionBuffer","extensionName","lengthBuffer","checksumBuffer","_writeGRBS","answerArray","rebusSolutions","grbsBuffer","solutionInfo","cells","includes","_writeRTBL","rtblBuffer","Object","keys","_writeRUSR","userSolutionArray","rusrBuffer","_writeLTIM","_writeRebus","cellSolution","cellIndex","buffers","totalBufferLength","ltimBuffer","_parsePuzzle","path","numberOfCells","gridAndClues","validatePuzzle","puzzle","checksumResults","_getPuzzleData","Promise","resolve","reject","info","intro","userSolution","err","PUZParser","then","toJSON","unscrambledAnswerArray","scrambled","flattenedAnswerArray","flattenedUnscrambledAnswerArray","cluesArray","headerBuffer","answerStringBuffer","userSolutionStringBuffer","titleStringBuffer","authorStringBuffer","copyrightStringBuffer","cluesStringBuffer","notesStringBuffer","some","rebusBuffer","exports","module"],"mappings":";;;;;;AAAA;;;;;;;AAOA,IAAMA,MAAkBC,QAAQ,YAAR,CAAxB;AACA,IAAMC,MAAkBD,QAAQ,YAAR,CAAxB;AACA,IAAME,QAAkBF,QAAQ,cAAR,CAAxB;AACA,IAAMG,UAAkBH,QAAQ,gBAAR,CAAxB;AACA,IAAMI,MAAkBJ,QAAQ,YAAR,CAAxB;AACA,IAAMK,OAAkBL,QAAQ,aAAR,CAAxB;AACA,IAAMM,SAAkBN,QAAQ,eAAR,CAAxB;AACA,IAAMO,UAAkBP,QAAQ,gBAAR,CAAxB;AACA,IAAMQ,WAAkBR,QAAQ,iBAAR,CAAxB;AACA,IAAMS,QAAkBT,QAAQ,cAAR,CAAxB;AACA,IAAMU,UAAkBV,QAAQ,gBAAR,CAAxB;AACA,IAAMW,UAAkBX,QAAQ,gBAAR,CAAxB;AACA,IAAMY,OAAkBZ,QAAQ,aAAR,CAAxB;AACA,IAAMa,QAAkBb,QAAQ,YAAR,CAAxB;AACA,IAAMc,YAAkBd,QAAQ,kBAAR,CAAxB;AACA,IAAMe,SAAkBf,QAAQ,WAAR,CAAxB;;AAGA,IAAMgB,mBAAmB,GAAzB;;AAEA,IAAMC,yBAAyB,KAA/B;;AAEA,IAAMC,0BAA0B,CAAhC;;AAEA,IAAMC,8BAA8B,CAApC;;AAEA,IAAMC,6BAA6B,CAAnC;;AAEA,IAAMC,uBAAuB,CAA7B;;AAEA,IAAMC,uBAAuB,EAA7B;;AAEA,IAAMC,yBAAyB,CAA/B;;AAEA,IAAMC,gCAAgC,CAAtC;;AAEA,IAAMC,4BAA4B,CAAlC;;AAEA,IAAMC,+BAA+B,CAArC;;AAEA,IAAMC,uBAAuB,EAA7B;;AAEA,IAAMC,iCAAiC,CAAvC;;AAEA,IAAMC,wBAAwB,CAA9B;;AAEA,IAAMC,oBAAoB,CAA1B;;AAEA,IAAMC,yBAAyB,CAA/B;;AAEA,IAAMC,cAAc;AACnBC,SAAQ,MADW;AAEnBC,cAAa;AAFM,CAApB;;AAKA,IAAMC,iBAAiB;AACtB;AACAC,WAAU,MAFY;AAGtB;AACAC,SAAQ;AAJc,CAAvB;;AAOA,IAAMC,cAAc;AACnBC,sBAAqB,IADF;AAEnBC,qBAAoB,IAFD;AAGnBC,cAAa,IAHM;AAInBC,UAAS;AAJU,CAApB;;AAOA,IAAMC,OAAO,4BAAb;;AAEA,IAAMC,oBAAoB,IAA1B;;AAEA,IAAMC,oBAAoB,IAA1B;;AAEA,SAASC,WAAT,CAAqBC,MAArB,EAA6BC,KAA7B,EAAoC;AACnC,MAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIF,OAAOG,MAA3B,EAAmCD,GAAnC,EAAwC;AACvC;AACA,MAAME,SAASH,QAAQ,MAAvB;;AAEAA,UAAQA,SAAS,CAAjB;;AAEA,MAAIG,MAAJ,EAAY;AACX;AACAH,WAAQA,QAAQ,MAAhB;AACA;;AAED;AACA;AACAA,UAASA,QAAQD,OAAOK,SAAP,CAAiBH,CAAjB,CAAT,GAAgC,MAAxC;AACA;;AAED,QAAOD,KAAP;AACA;;AAED,SAASK,WAAT,CAAqBC,MAArB,EAA6BC,OAA7B,EAAsC;AACrC,KAAMC,OAAO,EAAb;;AAEAA,MAAKC,cAAL,GAAsBH,OAAOI,WAAP,EAAtB;;AAEAJ,QAAOK,KAAP,CAAa,gBAAgBT,MAA7B,EAAqC,EAAEU,SAAS,IAAX,EAArC;;AAEAJ,MAAKK,cAAL,GAAsBP,OAAOI,WAAP,EAAtB;;AAEAF,MAAKM,aAAL,GAAqBR,OAAOS,WAAP,CAAmB3C,0BAAnB,CAArB;;AAEAoC,MAAKQ,OAAL,GAAeV,OAAOW,WAAP,EAAf;;AAEAT,MAAKU,QAAL,GAAgBZ,OAAOS,WAAP,CAAmB1C,oBAAnB,CAAhB;;AAEAmC,MAAKW,iBAAL,GAAyBb,OAAOI,WAAP,EAAzB;;AAEAF,MAAKY,QAAL,GAAgBd,OAAOS,WAAP,CAAmBzC,oBAAnB,CAAhB;;AAEAkC,MAAKa,KAAL,GAAaf,OAAOgB,UAAP,EAAb;;AAEAd,MAAKe,MAAL,GAAcjB,OAAOgB,UAAP,EAAd;;AAEAd,MAAKgB,aAAL,GAAqBlB,OAAOI,WAAP,EAArB;;AAEAF,MAAKiB,UAAL,GAAkBnB,OAAOI,WAAP,EAAlB;;AAEAF,MAAKkB,aAAL,GAAqBpB,OAAOI,WAAP,EAArB;;AAEA,KAAIF,KAAKkB,aAAL,KAAuBvC,eAAeE,MAAtC,IAAgD,CAACkB,QAAQoB,WAA7D,EAA0E;AACzE,QAAM,IAAIC,KAAJ,CAAU,kEAAV,CAAN;AACA;;AAED,QAAOpB,IAAP;AACA;;AAED,SAASqB,iBAAT,CAA2BC,SAA3B,EAAsC;AACrC,KAAIA,UAAUC,IAAV,KAAmB,MAAvB,EAA+B;AAC9BD,YAAUE,KAAV,GAAkBjF,IACjB+E,UAAUtB,IADO,EAEjB,UAACyB,CAAD,EAAO;AACN,OAAIA,MAAM,CAAV,EAAa;AACZ,WAAO,IAAP;AACA;;AAED,UAAOA,IAAI,CAAX;AACA,GARgB,CAAlB;AAUA;;AAED,KAAIH,UAAUC,IAAV,KAAmB,MAAvB,EAA+B;AAC9BD,YAAUI,eAAV,GAA4B5E,OAC3BO,MAAMsE,MAAN,CAAaL,UAAUtB,IAAvB,EAA6B1C,UAAUsE,QAAvC,EAAiDC,KAAjD,CAAuD,GAAvD,CAD2B,EAE3B,UAACC,SAAD,EAAYC,YAAZ,EAA6B;AAC5B,OAAMC,OAAOD,aAAaF,KAAb,CAAmB,GAAnB,CAAb;;AAEAG,QAAK,CAAL,IAAUC,SAASD,KAAK,CAAL,CAAT,EAAkB,EAAlB,CAAV;;AAEAF,aAAUE,KAAK,CAAL,CAAV,IAAqBA,KAAK,CAAL,CAArB;;AAEA,UAAOF,SAAP;AACA,GAV0B,EAW3B,EAX2B,CAA5B;AAaA;;AAED,KAAIR,UAAUC,IAAV,KAAmB,MAAvB,EAA+B;AAC9B,MAAMW,UAAU7E,MAAMsE,MAAN,CAAaL,UAAUtB,IAAvB,EAA6B1C,UAAUsE,QAAvC,EAAiDC,KAAjD,CAAuD,GAAvD,CAAhB;;AAEAP,YAAUa,MAAV,GAAmB;AAClBC,YAASH,SAASC,QAAQ,CAAR,CAAT,EAAqB,EAArB,CADS;AAElBG,YAASH,QAAQ,CAAR,MAAe;AAFN,GAAnB;AAIA;;AAED,KAAIZ,UAAUC,IAAV,KAAmB,MAAvB,EAA+B;AAC9BD,YAAUgB,WAAV,GAAwB/F,IACvB+E,UAAUtB,IADa,EAEvB,UAACyB,CAAD,EAAO;AACN,UAAO;AACN1C,yBAAqB,CAAC,EAAE0C,IAAI3C,YAAYC,mBAAlB,CADhB;AAENC,wBAAoB,CAAC,EAAEyC,IAAI3C,YAAYE,kBAAlB,CAFf;AAGNC,iBAAa,CAAC,EAAEwC,IAAI3C,YAAYG,WAAlB,CAHR;AAINC,aAAS,CAAC,EAAEuC,IAAI3C,YAAYI,OAAlB;AAJJ,IAAP;AAMA,GATsB,CAAxB;AAWA;;AAED,KAAIoC,UAAUC,IAAV,KAAmB,MAAvB,EAA+B;AAC9BD,YAAUiB,kBAAV,GAA+BhG,IAC9Bc,MAAMsE,MAAN,CAAaL,UAAUtB,IAAvB,EAA6B1C,UAAUsE,QAAvC,EAAiDC,KAAjD,CAAuD,IAAvD,CAD8B,EAE9B,UAACW,KAAD;AAAA,UAAWA,UAAU,EAAV,GAAe,IAAf,GAAsBA,KAAjC;AAAA,GAF8B,CAA/B;AAIA;;AAED,QAAOlB,SAAP;AACA;;AAED,SAASmB,cAAT,CAAwB3C,MAAxB,EAAgC;AAC/B,KAAMwB,YAAY,EAAlB;;AAEAA,WAAUC,IAAV,GAAiBzB,OAAOW,WAAP,CAAmBpC,qBAAnB,CAAjB;;AAEA,KAAMqB,SAASI,OAAOI,WAAP,EAAf;;AAEAoB,WAAUoB,QAAV,GAAqB5C,OAAOI,WAAP,EAArB;;AAEA;AACAoB,WAAUtB,IAAV,GAAiBF,OAAOS,WAAP,CAAmBb,SAAS,CAA5B,CAAjB;AACA;AACA4B,WAAUtB,IAAV,GAAiBsB,UAAUtB,IAAV,CAAe2C,KAAf,CAAqB,CAArB,EAAwB,CAAC,CAAzB,CAAjB;;AAEA,QAAOtB,kBAAkBC,SAAlB,CAAP;AACA;;AAED,SAASsB,SAAT,CAAmB9C,MAAnB,EAA2BE,IAA3B,EAAiC;AAChC,KAAM6C,kBAAkB/C,OAAO1C,IAAP,KAAgB0C,OAAOgD,IAAP,EAAxC;;AAEA,KAAID,mBAAmBnF,uBAAvB,EAAgD;AAC/C,MAAM4D,YAAYmB,eAAe3C,MAAf,CAAlB;;AAEAE,OAAK+C,UAAL,GAAkB/C,KAAK+C,UAAL,IAAmB,EAArC;AACA/C,OAAK+C,UAAL,CAAgBzB,UAAUC,IAA1B,IAAkCD,SAAlC;;AAEA,SAAOA,UAAUC,IAAjB;;AAEAqB,YAAU9C,MAAV,EAAkBE,IAAlB;AACA;AACD;;AAED,SAASgD,gBAAT,CAA0BlD,MAA1B,EAAkCmD,UAAlC,EAA8C;AAC7C,KAAMjD,OAAO,EAAb;;AAEA4C,WAAU9C,MAAV,EAAkBE,IAAlB;;AAEA,KAAIvD,IAAIuD,IAAJ,EAAU,iBAAV,CAAJ,EAAkC;AACjCnD,OACCE,QAAQkG,WAAWC,IAAnB,CADD,EAEC,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAChB,OAAMC,IAAIF,IAAV;;AAEA,OAAInD,KAAK+C,UAAL,CAAgBO,IAAhB,CAAqB9B,KAArB,CAA2B4B,KAA3B,MAAsC,IAA1C,EAAgD;AAC/C;AACA;;AAED,OAAMG,gBAAgBvD,KAAK+C,UAAL,CAAgBS,IAAhB,CAAqB9B,eAArB,CACrB1B,KAAK+C,UAAL,CAAgBO,IAAhB,CAAqB9B,KAArB,CAA2B4B,KAA3B,CADqB,CAAtB;;AAIAC,KAAEI,QAAF,GAAaF,aAAb;AACA,GAdF;AAgBA;;AAED,KAAI9G,IAAIuD,IAAJ,EAAU,iBAAV,CAAJ,EAAkC;AACjCA,OAAK+C,UAAL,CAAgBW,IAAhB,CAAqBnB,kBAArB,CAAwCoB,OAAxC,CACC,UAACC,IAAD,EAAOR,KAAP,EAAiB;AAChB,OAAIQ,SAAS,IAAb,EAAmB;AAClB,QAAMC,IAAIC,KAAKC,KAAL,CAAWX,QAAQH,WAAWe,MAAX,CAAkBnD,KAArC,CAAV;AACA,QAAMoD,IAAIb,QAAQH,WAAWe,MAAX,CAAkBnD,KAApC;;AAEAoC,eAAWQ,QAAX,CAAoBI,CAApB,EAAuBI,CAAvB,IAA4BL,IAA5B;AACA;AACD,GARF;AAUA;;AAEDX,YAAWiB,WAAX,GAAyBlE,KAAK+C,UAA9B;;AAEAE,YAAWd,MAAX,GAAoB1F,IAAIuD,IAAJ,EAAU,wBAAV,CAApB;AACA;;AAED,SAASmE,UAAT,CAAoBrE,MAApB,EAA4BkB,aAA5B,EAA2C;AAC1C,KAAMoD,QAAQ,EAAd;;AAEA,MAAK,IAAI3E,IAAI,CAAb,EAAgBA,IAAIuB,aAApB,EAAmCvB,GAAnC,EAAwC;AACvC2E,QAAMC,IAAN,CAAWvE,OAAOW,WAAP,EAAX;AACA;;AAED,QAAO2D,KAAP;AACA;;AAED,SAASE,qBAAT,CAA+BC,OAA/B,EAAwCC,QAAxC,EAAkD;AACjD,UAASC,YAAT,CAAsBR,CAAtB,EAAyBJ,CAAzB,EAA4B;AAC3B,SAAOU,QAAQV,CAAR,EAAWI,CAAX,MAAkBzG,gBAAzB;AACA;;AAED,KAAM4G,QAAQ;AACbM,UAAQ,EADK;AAEbC,QAAM;AAFO,EAAd;;AAKA,KAAMzB,OAAO,EAAb;;AAEA,KAAMrC,QAAQ0D,QAAQ,CAAR,EAAW7E,MAAzB;AAAA,KAAiCqB,SAASwD,QAAQ7E,MAAlD;;AAEA,KAAIkF,YAAY,CAAhB;;AAEA,KAAIC,gBAAgB,CAApB;;AAEA,MAAK,IAAIhB,IAAI,CAAb,EAAgBA,IAAI9C,MAApB,EAA4B8C,GAA5B,EAAiC;AAChC,MAAMiB,MAAM,EAAZ;;AAEA,OAAK,IAAIb,IAAI,CAAb,EAAgBA,IAAIpD,KAApB,EAA2BoD,GAA3B,EAAgC;AAC/B,OAAMd,OAAO,EAAb;;AAEA,OAAIsB,aAAaR,CAAb,EAAgBJ,CAAhB,CAAJ,EAAwB;AACvBV,SAAK4B,WAAL,GAAmB,IAAnB;AACA,IAFD,MAGK;AACJ5B,SAAKM,QAAL,GAAgBc,QAAQV,CAAR,EAAWI,CAAX,CAAhB;;AAEA,QAAIU,OAAO,KAAX;AAAA,QAAkBD,SAAS,KAA3B;;AAEA,QACC,CACCT,MAAM,CAAN,IACAQ,aAAaR,IAAI,CAAjB,EAAoBJ,CAApB,CAFD,KAICI,IAAI,CAAJ,GAAQpD,KAAR,IACA,CAAC4D,aAAaR,IAAI,CAAjB,EAAoBJ,CAApB,CANH,EAQE;AACDa,cAAS,IAAT;AACA;;AAED,QACC,CACCb,MAAM,CAAN,IACAY,aAAaR,CAAb,EAAgBJ,IAAI,CAApB,CAFD,KAICA,IAAI,CAAJ,GAAQ9C,MAAR,IACA,CAAC0D,aAAaR,CAAb,EAAgBJ,IAAI,CAApB,CANH,EAQE;AACDc,YAAO,IAAP;AACA;;AAED,QAAID,UAAUC,IAAd,EAAoB;AACnBxB,UAAK6B,UAAL,GAAkB,EAAEJ,SAApB;AACA;;AAED,QAAIF,MAAJ,EAAY;AACXN,WAAMM,MAAN,CAAaE,SAAb,IAA0BJ,SAASK,eAAT,CAA1B;AACA;;AAED,QAAIF,IAAJ,EAAU;AACTP,WAAMO,IAAN,CAAWC,SAAX,IAAwBJ,SAASK,eAAT,CAAxB;AACA;AACD;;AAGDC,OAAIT,IAAJ,CAASlB,IAAT;AACA;;AAEDD,OAAKmB,IAAL,CAAUS,GAAV;AACA;;AAED,QAAO;AACN5B,YADM;AAENkB;AAFM,EAAP;AAIA;;AAED,SAASa,eAAT,CAAyB/B,IAAzB,EAA+B;AAC9B,QAAOA,KAAK3G,GAAL,CACN,UAACuI,GAAD;AAAA,SAASA,IAAIvI,GAAJ,CACR,UAAC4G,IAAD,EAAU;AACT,OAAIA,KAAK4B,WAAT,EAAsB;AACrB,WAAOvH,gBAAP;AACA;;AAED,OAAI2F,KAAKM,QAAL,KAAkB,IAAtB,EAA4B;AAC3B,WAAO,GAAP;AACA;;AAED,UAAON,KAAKM,QAAZ;AACA,GAXO,CAAT;AAAA,EADM,CAAP;AAeA;;AAED,SAASyB,gBAAT,CAA0BzB,QAA1B,EAAoC;AACnC,QAAO1G,QAAQ0G,QAAR,EAAkBlH,GAAlB,CACN,UAACiG,KAAD,EAAW;AACV,MAAIA,UAAU,IAAd,EAAoB;AACnB,UAAOhF,gBAAP;AACA;;AAED,MAAIgF,UAAU,EAAd,EAAkB;AACjB,UAAO,GAAP;AACA;;AAED,SAAOA,MAAM,CAAN,CAAP;AACA,EAXK,EAYL2C,IAZK,CAYA,EAZA,CAAP;AAaA;;AAED,SAASC,kBAAT,CAA4B3B,QAA5B,EAAsC5C,KAAtC,EAA6C;AAC5C,QAAO5D,MACNwG,SAAS5B,KAAT,CAAe,EAAf,CADM,EAENhB,KAFM,EAGLtE,GAHK,CAIN,UAACuI,GAAD;AAAA,SAASA,IAAIvI,GAAJ,CACR,UAAC4G,IAAD;AAAA,UAAUA,SAAS,GAAT,GAAe,EAAf,GAAoBA,IAA9B;AAAA,GADQ,CAAT;AAAA,EAJM,CAAP;AAQA;;AAED,SAASkC,aAAT,CAAuBpC,UAAvB,EAAmCP,QAAnC,EAA6C;AAC5C,KAAIO,WAAWqC,KAAf,EAAsB;AACrB5C,aAAWpD,YAAYjC,MAAMkI,MAAN,CAAatC,WAAWqC,KAAX,GAAmB,IAAhC,EAAsChI,UAAUsE,QAAhD,CAAZ,EAAuEc,QAAvE,CAAX;AACA;;AAED,KAAIO,WAAWuC,MAAf,EAAuB;AACtB9C,aAAWpD,YAAYjC,MAAMkI,MAAN,CAAatC,WAAWuC,MAAX,GAAoB,IAAjC,EAAuClI,UAAUsE,QAAjD,CAAZ,EAAwEc,QAAxE,CAAX;AACA;;AAGD,KAAIO,WAAWwC,SAAf,EAA0B;AACzB/C,aAAWpD,YAAYjC,MAAMkI,MAAN,CAAatC,WAAWwC,SAAX,GAAuB,IAApC,EAA0CnI,UAAUsE,QAApD,CAAZ,EAA2Ec,QAA3E,CAAX;AACA;;AAEDO,YAAWuB,QAAX,CAAoBb,OAApB,CACC,UAAC+B,IAAD,EAAU;AACT,MAAIA,IAAJ,EAAU;AACThD,cAAWpD,YAAYjC,MAAMkI,MAAN,CAAaG,IAAb,EAAmBpI,UAAUsE,QAA7B,CAAZ,EAAoDc,QAApD,CAAX;AACA;AACD,EALF;;AAQA,KAAIO,WAAW0C,KAAf,EAAsB;AACrBjD,aAAWpD,YAAYjC,MAAMkI,MAAN,CAAatC,WAAW0C,KAAX,GAAmB,IAAhC,EAAsCrI,UAAUsE,QAAhD,CAAZ,EAAuEc,QAAvE,CAAX;AACA;;AAED,QAAOA,QAAP;AACA;;AAED,SAASkD,eAAT,CAAyB3C,UAAzB,EAAqCP,QAArC,EAA+C;AAC9C,KAAGA,mBAAH,EAA2B;AAC1BA,aAAW,CAAX;AACA;;AAED,KAAMnD,SAAS,IAAIsG,MAAJ,CAAWlI,2BAAX,CAAf;;AAEA4B,QAAOuG,UAAP,CAAkB7C,WAAWe,MAAX,CAAkBnD,KAApC,EAA2C,CAA3C;AACAtB,QAAOuG,UAAP,CAAkB7C,WAAWe,MAAX,CAAkBjD,MAApC,EAA4C,CAA5C;AACA;AACA;AACAxB,QAAOwG,aAAP,CAAqB9C,WAAWe,MAAX,CAAkBhD,aAAvC,EAAsD,CAAtD;AACAzB,QAAOwG,aAAP,CAAqB9C,WAAWe,MAAX,CAAkB/C,UAAvC,EAAmD,CAAnD;AACA1B,QAAOwG,aAAP,CAAqB9C,WAAWe,MAAX,CAAkB9C,aAAvC,EAAsD,CAAtD;AACA;;AAEA,QAAO5B,YAAYC,MAAZ,EAAoBmD,QAApB,CAAP;AACA;;AAED,SAASsD,eAAT,CAAyB/C,UAAzB,EAAqC5C,cAArC,EAAqD;AACpD,KAAIqC,WAAWrC,4BAA+BuF,gBAAgB3C,UAAhB,CAA/B,GAA6D5C,cAA5E;;AAEA,KAAId,SAASlC,MAAMkI,MAAN,CAAatC,WAAWgD,MAAxB,EAAgC3I,UAAUsE,QAA1C,CAAb;;AAEAc,YAAWpD,YAAYC,MAAZ,EAAoBmD,QAApB,CAAX;;AAEAnD,UAASlC,MAAMkI,MAAN,CAAatC,WAAWQ,QAAxB,EAAkCnG,UAAUsE,QAA5C,CAAT;;AAEAc,YAAWpD,YAAYC,MAAZ,EAAoBmD,QAApB,CAAX;;AAEAA,YAAW2C,cAAcpC,UAAd,EAA0BP,QAA1B,CAAX;;AAEA,QAAOA,QAAP;AACA;;AAED,SAASwD,cAAT,CAAwBjD,UAAxB,EAAoC;AACnC,KAAM5C,iBAAiBuF,gBAAgB3C,UAAhB,CAAvB;AACA,KAAMkD,iBAAiB7G,YAAYjC,MAAMkI,MAAN,CAAatC,WAAWgD,MAAxB,EAAgC3I,UAAUsE,QAA1C,CAAZ,CAAvB;AACA,KAAMwE,mBAAmB9G,YAAYjC,MAAMkI,MAAN,CAAatC,WAAWQ,QAAxB,EAAkCnG,UAAUsE,QAA5C,CAAZ,CAAzB;AACA,KAAMyE,eAAehB,cAAcpC,UAAd,CAArB;;AAEA,KAAMqD,wBAAwB,UAA9B;;AAEA,KAAMhG,gBAAgB,IAAIuF,MAAJ,CAAW;AAChC;AACAS,uBAAsBC,UAAtB,CAAiC,CAAjC,IAAuClG,iBAAiB,IAFxB,EAGhCiG,sBAAsBC,UAAtB,CAAiC,CAAjC,IAAuCJ,iBAAiB,IAHxB,EAIhCG,sBAAsBC,UAAtB,CAAiC,CAAjC,IAAuCH,mBAAmB,IAJ1B,EAKhCE,sBAAsBC,UAAtB,CAAiC,CAAjC,IAAuCF,eAAe,IALtB,EAMhCC,sBAAsBC,UAAtB,CAAiC,CAAjC,IAAuC,CAAClG,iBAAiB,MAAlB,KAA6B,CANpC,EAOhCiG,sBAAsBC,UAAtB,CAAiC,CAAjC,IAAuC,CAACJ,iBAAiB,MAAlB,KAA6B,CAPpC,EAQhCG,sBAAsBC,UAAtB,CAAiC,CAAjC,IAAuC,CAACH,mBAAmB,MAApB,KAA+B,CARtC,EAShCE,sBAAsBC,UAAtB,CAAiC,CAAjC,IAAuC,CAACF,eAAe,MAAhB,KAA2B;AAClE;AAVgC,EAAX,CAAtB;;AAcA,QAAO/F,aAAP;AACA;;AAED,SAASkG,cAAT,CAAwBC,UAAxB,EAAoC5F,KAApC,EAA2CE,MAA3C,EAAmD;AAClD,KAAMf,OAAOyG,WAAWC,KAAX,CAAiB,IAAIC,MAAJ,CAAW,SAAS9F,KAAT,GAAiB,GAA5B,EAAiC,GAAjC,CAAjB,CAAb;;AAEA,QAAOnE,MAAMmE,KAAN,EAAatE,GAAb,CACN,UAAC8G,CAAD;AAAA,SAAO3G,MAAMqE,MAAN,EAAcxE,GAAd,CACN,UAACqK,CAAD;AAAA,UAAO5G,KAAK4G,CAAL,EAAQvD,CAAR,CAAP;AAAA,GADM,EAEL8B,IAFK,CAEA,EAFA,CAAP;AAAA,EADM,EAILA,IAJK,CAIA,EAJA,CAAP;AAKA;;AAED,SAAS0B,gBAAT,CAA0BC,CAA1B,EAA6BC,CAA7B,EAAgC;AAC/B;;;;;;;;;AAWAA,KAAIA,EAAElF,KAAF,CAAQ,EAAR,CAAJ;;AAEA,QAAOiF,EAAEjF,KAAF,CAAQ,EAAR,EAAY/E,MAAZ,CACN,UAACkK,GAAD,EAAM3D,CAAN,EAAY;AACX,MAAIA,MAAM7F,gBAAV,EAA4B;AAC3BwJ,OAAI3C,IAAJ,CAAShB,CAAT;AACA,GAFD,MAGK;AACJ2D,OAAI3C,IAAJ,CAAS0C,EAAEE,KAAF,EAAT;AACA;;AAED,SAAOD,GAAP;AACA,EAVK,EAWN,EAXM,EAYL7B,IAZK,CAYA,EAZA,CAAP;AAaA;;AAED,SAAS+B,MAAT,CAAgBC,GAAhB,EAAqBC,GAArB,EAA0B;AACzB,QAAOD,IAAItF,KAAJ,CAAU,EAAV,EAActF,GAAd,CACN,UAAC8G,CAAD,EAAID,KAAJ,EAAc;AACb,MAAIiE,cAAc,CAAClI,KAAKmI,OAAL,CAAajE,CAAb,IAAkBkE,OAAOH,IAAIhE,QAAQgE,IAAI1H,MAAhB,CAAP,CAAnB,IAAsDP,KAAKO,MAA7E;;AAEA,MAAI2H,cAAc,CAAlB,EAAqB;AACpBA,iBAAclI,KAAKO,MAAL,GAAc2H,WAA5B;AACA;;AAED,SAAOlI,KAAKkI,WAAL,CAAP;AACA,EATK,EAULlC,IAVK,CAUA,EAVA,CAAP;AAWA;;AAED,SAASqC,QAAT,CAAkBL,GAAlB,EAAuBC,GAAvB,EAA4B;AAC3B,QAAOF,OACNC,GADM,EAEN5K,IAAI6K,GAAJ,EAAS,UAACK,CAAD;AAAA,SAAO,CAACA,CAAR;AAAA,EAAT,CAFM,CAAP;AAIA;;AAED,SAASC,WAAT,CAAqBP,GAArB,EAA0B;AACzB,QAAOA,IAAItF,KAAJ,CAAU,EAAV,EAAc/E,MAAd,CACN,UAACkK,GAAD,EAAM3D,CAAN,EAAS5D,CAAT,EAAe;AACd;AACA,MAAIA,IAAI,CAAJ,KAAU,CAAd,EAAiB;AAChBuH,OAAI3C,IAAJ,CAAShB,CAAT;AACA;;AAED,SAAO2D,GAAP;AACA,EARK,EASN,EATM,EAUL7B,IAVK,CAUA,EAVA,CAAP;AAWA;;AAED,SAASwC,UAAT,CAAoBR,GAApB,EAAyB;AACxB,QAAOO,YAAYP,IAAIS,SAAJ,CAAc,CAAd,CAAZ,IAAgCF,YAAYP,GAAZ,CAAvC;AACA;;AAED,SAASU,iBAAT,CAA2BV,GAA3B,EAAgCC,GAAhC,EAAqC;AACpC,KAAMU,MAAMX,IAAIzH,MAAhB;;AAEA/C,SAAQK,SAASoK,GAAT,EAAc9I,iBAAd,EAAiC,GAAjC,EAAsCuD,KAAtC,CAA4C,EAA5C,CAAR,EAAyD8B,OAAzD,CACC,UAAC8D,CAAD,EAAO;AACNN,QAAMQ,WAAWR,GAAX,CAAN;AACAA,QAAMA,IAAIS,SAAJ,CAAcE,MAAML,CAApB,IAAyBN,IAAIS,SAAJ,CAAc,CAAd,EAAiBE,MAAML,CAAvB,CAA/B;AACAN,QAAMK,SAASL,GAAT,EAAcC,GAAd,CAAN;AACA,EALF;;AAQA,QAAOD,GAAP;AACA;;AAGD,SAASY,QAAT,CAAkBZ,GAAlB,EAAuB;AACtB;AACA,KAAMa,MAAMlE,KAAKC,KAAL,CAAWoD,IAAIzH,MAAJ,GAAa,CAAxB,CAAZ;;AAEA,QAAO9C,IACNuK,IAAIS,SAAJ,CAAcI,GAAd,EAAmBnG,KAAnB,CAAyB,EAAzB,CADM,EAENsF,IAAIS,SAAJ,CAAc,CAAd,EAAiBI,GAAjB,EAAsBnG,KAAtB,CAA4B,EAA5B,CAFM,EAGL/E,MAHK,CAIN,UAACkK,GAAD,EAAMiB,KAAN,EAAgB;AACf,MAAIA,MAAM,CAAN,gBAA0BA,MAAM,CAAN,YAA9B,EAAsD;AACrD,UAAOjB,GAAP;AACA;;AAEDA,MAAI3C,IAAJ,CAAS4D,MAAM,CAAN,IAAWA,MAAM,CAAN,CAApB;;AAEA,SAAOjB,GAAP;AACA,EAZK,EAaN;AACD;AAdO,GAeL7B,IAfK,CAeA,EAfA,KAeOgC,IAAIzH,MAAJ,GAAa,CAAb,GAAiByH,IAAIA,IAAIzH,MAAJ,GAAa,CAAjB,CAAjB,GAAuC,EAf9C,CAAP;AAgBA;;AAED,SAASwI,eAAT,CAAyBf,GAAzB,EAA8BC,GAA9B,EAAmC;AAClC;;;;;;;;;;;AAaAvK,MACCG,SAASoK,GAAT,EAAc9I,iBAAd,EAAiC,GAAjC,CADD,EAEC,UAACmJ,CAAD,EAAO;AACNN,QAAMD,OAAOC,GAAP,EAAYC,GAAZ,CAAN;AACAD,QAAMA,IAAIS,SAAJ,CAAcH,CAAd,IAAmBN,IAAIS,SAAJ,CAAc,CAAd,EAAiBH,CAAjB,CAAzB;AACAN,QAAMY,SAASZ,GAAT,CAAN;AACA,EANF;;AASA,QAAOA,GAAP;AACA;;AAED,SAASgB,kBAAT,CAA4BlC,MAA5B,EAAoCpF,KAApC,EAA2CE,MAA3C,EAAmD;AAClD,KAAMqH,aAAa5B,eAClBtB,iBAAiBe,MAAjB,CADkB,EAElBpF,KAFkB,EAGlBE,MAHkB,EAIjBsH,OAJiB,CAIT5K,sBAJS,EAIe,EAJf,CAAnB;;AAMA,QAAO6B,YAAYjC,MAAMkI,MAAN,CAAa6C,UAAb,EAAyB9K,UAAUsE,QAAnC,CAAZ,CAAP;AACA;;AAED,SAAS0G,kBAAT,CAA4BrF,UAA5B,EAAwC;AACvC,KAAM5C,iBAAiBuF,gBAAgB3C,UAAhB,CAAvB;;AAEA,KAAMhD,iBAAiB+F,gBAAgB/C,UAAhB,EAA4B5C,cAA5B,CAAvB;;AAEA,KAAMC,gBAAgB4F,eAAejD,UAAf,CAAtB;;AAEA,KAAMsF,YAAY;AACjBvE,UAAQ3D,cADS;AAEjBmI,UAAQvI,cAFS;AAGjBwI,SAAOnI;AAHU,EAAlB;;AAMA,KAAMoI,SAAS,EAAf;;AAEA,KAAIH,UAAUvE,MAAV,KAAqBf,WAAWe,MAAX,CAAkB3D,cAA3C,EAA2D;AAC1DqI,SAAOrE,IAAP,CAAY,+BAAZ;AACA;;AAED,KAAIkE,UAAUC,MAAV,KAAqBvF,WAAWe,MAAX,CAAkB/D,cAA3C,EAA2D;AAC1DyI,SAAOrE,IAAP,CAAY,+BAAZ;AACA;;AAED,KAAI,CAACkE,UAAUE,KAAV,CAAgBE,MAAhB,CAAuB1F,WAAWe,MAAX,CAAkB1D,aAAzC,CAAL,EAA8D;AAC7DoI,SAAOrE,IAAP,CAAY,8BAAZ;AACA;;AAEDxH,MACCoG,WAAWiB,WADZ,EAEC,UAAC5C,SAAD,EAAYC,IAAZ,EAAqB;AACpB,MAAID,UAAUoB,QAAV,KAAuBpD,YAAYgC,UAAUtB,IAAtB,CAA3B,EAAwD;AACvD0I,UAAOrE,IAAP,6BAAsC9C,IAAtC;AACA;AACD,EANF;;AASA,QAAOmH,MAAP;AACA;;AAED,SAASE,iBAAT,CAA2BC,YAA3B,EAAyCzB,GAAzC,EAA8C;AAC7C,KAAMrG,SAAS8H,aAAanJ,MAA5B;AACA,KAAMmB,QAAQgI,aAAa,CAAb,EAAgBnJ,MAA9B;;AAEA,KAAIoJ,iBAAiB/L,QACpBmI,iBAAiB2D,YAAjB,CADoB,EAEnB1D,IAFmB,CAEd,EAFc,CAArB;;AAIA,KAAMiD,aAAa5B,eAAesC,cAAf,EAA+BjI,KAA/B,EAAsCE,MAAtC,CAAnB;;AAEA,KAAMf,OAAO6G,iBACZuB,UADY,EAEZF,gBAAgBE,WAAWC,OAAX,CAAmB5K,sBAAnB,EAA2C,EAA3C,CAAhB,EAAgE2J,GAAhE,CAFY,CAAb;;AAKA0B,kBAAiBtC,eAAexG,IAAf,EAAqBe,MAArB,EAA6BF,KAA7B,CAAjB;;AAEA,QAAO5D,MAAM6L,eAAejH,KAAf,CAAqB,EAArB,CAAN,EAAgChB,KAAhC,CAAP;AACA;;AAED,SAASkI,mBAAT,CAA6B9F,UAA7B,EAAyCmE,GAAzC,EAA8C;AAC7C,KAAMgB,aAAa5B,eAClBvD,WAAWgD,MADO,EAElBhD,WAAWe,MAAX,CAAkBnD,KAFA,EAGlBoC,WAAWe,MAAX,CAAkBjD,MAHA,CAAnB;;AAMA,KAAMf,OAAO6G,iBACZuB,UADY,EAEZP,kBACCO,WAAWC,OAAX,CAAmB5K,sBAAnB,EAA2C,EAA3C,CADD,EAEC2J,GAFD,CAFY,CAAb;;AAQA,KAAM4B,SAASxC,eACdxG,IADc,EAEdiD,WAAWe,MAAX,CAAkBjD,MAFJ,EAGdkC,WAAWe,MAAX,CAAkBnD,KAHJ,CAAf;;AAMA,KAAImI,WAAW/F,WAAWgD,MAA1B,EAAkC;AACjC,QAAM,IAAI7E,KAAJ,CAAU,4EAAV,CAAN;AACA;;AAED,QAAO4H,MAAP;AACA;;AAED,SAASC,YAAT,CAAsBhG,UAAtB,EAAkClD,OAAlC,EAA2C;AAC1C,KAAMmJ,uBAAuB,IAAIrD,MAAJ,CAAW9H,sBAAX,CAA7B;;AAEAmL,sBAAqBnD,aAArB,CAAmCC,gBAAgB/C,UAAhB,CAAnC;;AAEA,KAAMkG,uBAAuB,IAAItD,MAAJ,CAAW9H,sBAAX,CAA7B;;AAEAoL,sBAAqBpD,aAArB,CAAmCH,gBAAgB3C,UAAhB,CAAnC;;AAEA,KAAMmG,sBAAsBlD,eAAejD,UAAf,CAA5B;;AAEA,KAAMoG,0BAA0B,IAAIxD,MAAJ,CAAW9H,sBAAX,CAAhC;;AAEA,KAAItB,IAAIsD,OAAJ,EAAa,WAAb,CAAJ,EAA+B;AAC9BsJ,0BAAwBtD,aAAxB,CACCoC,mBACClF,WAAWqG,iBADZ,EAECrG,WAAWe,MAAX,CAAkBnD,KAFnB,EAGCoC,WAAWe,MAAX,CAAkBjD,MAHnB,CADD;AAOA,EARD,MASK;AACJsI,0BAAwBE,IAAxB,CAA6B,GAA7B;AACA;;AAED,KAAMC,sBAAsB,IAAI3D,MAAJ,CAAW7H,6BAAX,CAA5B;;AAEAwL,qBAAoBzD,aAApB,CAAkC9C,WAAWe,MAAX,CAAkBhD,aAApD;;AAEA,KAAMyI,mBAAmB,IAAI5D,MAAJ,CAAW5H,yBAAX,CAAzB;;AAEAwL,kBAAiB1D,aAAjB,CAA+B9C,WAAWe,MAAX,CAAkB/C,UAAjD;;AAEA,KAAMyI,sBAAsB,IAAI7D,MAAJ,CAAW3H,4BAAX,CAA5B;;AAEAwL,qBAAoB3D,aAApB,CAAkC9C,WAAWe,MAAX,CAAkB9C,aAApD;;AAEA,QAAO2E,OAAO8D,MAAP,CACN,CACCT,oBADD,EAEC7L,MAAMkI,MAAN,CAAa,eAAb,EAA8BjI,UAAUsE,QAAxC,CAFD,EAGCuH,oBAHD,EAICC,mBAJD,EAKC/L,MAAMkI,MAAN,CAAa9I,IAAIsD,OAAJ,EAAa,SAAb,EAAwB,KAAxB,IAAiC,IAA9C,EAAoDzC,UAAUsE,QAA9D,CALD;AAMC;AACA,KAAIiE,MAAJ,CAAW,CAAC,GAAD,EAAM,GAAN,CAAX,CAPD,EAQCwD,uBARD;AASC;AACA,KAAIxD,MAAJ,CAAW/H,oBAAX,EAAiCyL,IAAjC,CAAsC,GAAtC,CAVD,EAWC,IAAI1D,MAAJ,CAAW,CAAC5C,WAAWe,MAAX,CAAkBnD,KAAnB,CAAX,CAXD,EAYC,IAAIgF,MAAJ,CAAW,CAAC5C,WAAWe,MAAX,CAAkBjD,MAAnB,CAAX,CAZD,EAaCyI,mBAbD,EAcCC,gBAdD,EAeCC,mBAfD,CADM,EAkBNvL,oBAlBM,CAAP;AAoBA;;AAED,SAASyL,eAAT,CAAyBC,eAAzB,EAA0CC,aAA1C,EAAyD;AACxD,KAAMC,eAAe,IAAIlE,MAAJ,CAAWzH,8BAAX,CAArB;AACA2L,cAAahE,aAAb,CAA2B8D,gBAAgBnK,MAA3C;;AAEA,KAAMsK,iBAAiB,IAAInE,MAAJ,CAAW9H,sBAAX,CAAvB;AACAiM,gBAAejE,aAAf,CAA6BzG,YAAYuK,eAAZ,CAA7B;;AAEA,QAAOhE,OAAO8D,MAAP,CACN,CACCtM,MAAMkI,MAAN,CAAauE,aAAb,EAA4BxM,UAAUsE,QAAtC,CADD,EAECmI,YAFD,EAGCC,cAHD,EAICH,eAJD,EAKC,IAAIhE,MAAJ,CAAW,CAAC,CAAD,CAAX,CALD,CADM,EAQNxH,wBAAwBD,8BAAxB,GAAyDL,sBAAzD,GAAkF8L,gBAAgBnK,MAAlG,GAA2G,CARrG,CAAP;AAUA;;AAED,SAASuK,UAAT,CAAoBC,WAApB,EAAiCC,cAAjC,EAAiD;AAChD,KAAMC,aAAa,IAAIvE,MAAJ,CAClBqE,YAAY3N,GAAZ,CACC,UAAC4G,IAAD,EAAOC,KAAP,EAAiB;AAChB,MAAMjC,cAAcjE,QACnBiN,cADmB,EAEnB,UAACE,YAAD;AAAA,UAAkBA,aAAaC,KAAb,CAAmBC,QAAnB,CAA4BnH,KAA5B,CAAlB;AAAA,GAFmB,CAApB;;AAKA,MAAIjC,sBAAJ,EAA+B;AAC9B,UAAO,CAAP;AACA;;AAED,SAAOc,SAASd,WAAT,EAAsB,EAAtB,IAA4B,CAAnC;AACA,EAZF,CADkB,CAAnB;;AAiBA,QAAOyI,gBAAgBQ,UAAhB,EAA4B,MAA5B,CAAP;AACA;;AAED,SAASI,UAAT,CAAoBL,cAApB,EAAoC;AACnC,KAAMM,aAAapN,MAAMkI,MAAN,CAClBmF,OAAOC,IAAP,CAAYR,cAAZ,EAA4B5N,GAA5B,CACC,UAAC6K,GAAD;AAAA,SAAYpK,SAASoK,GAAT,EAAc7I,sBAAd,EAAsC,GAAtC,CAAZ,SAA0D4L,eAAe/C,GAAf,EAAoB3D,QAA9E;AAAA,EADD,EAEE0B,IAFF,CAEO,EAFP,CADkB,EAIlB7H,UAAUsE,QAJQ,CAAnB;;AAOA,QAAOgI,gBAAgBa,UAAhB,EAA4B,MAA5B,CAAP;AACA;;AAED,SAASG,UAAT,CAAoBC,iBAApB,EAAuC;AACtC,KAAMC,aAAazN,MAAMkI,MAAN,CAClBsF,kBAAkBtO,GAAlB,CACC,UAACkH,QAAD,EAAc;AACb,MAAIA,SAAS/D,MAAT,GAAkB,CAAtB,EAAyB;AACxB,UAAU+D,QAAV;AACA;;AAED,SAAO,IAAP;AACA,EAPF,EAQE0B,IARF,CAQO,EARP,CADkB,EAUlB7H,UAAUsE,QAVQ,CAAnB;;AAaA,QAAOgI,gBAAgBkB,UAAhB,EAA4B,MAA5B,CAAP;AACA;;AAED,SAASC,UAAT,CAAoB5I,MAApB,EAA4B;AAC3B,QAAOyH,gBACNvM,MAAMkI,MAAN,CACIpD,OAAOC,OADX,UACsBD,OAAOE,OAAP,GAAiB,GAAjB,GAAuB,GAD7C,GAEC/E,UAAUsE,QAFX,CADM,EAKN,MALM,CAAP;AAOA;;AAED,SAASoJ,WAAT,CAAqBd,WAArB,EAAkCW,iBAAlC,EAAqD9H,UAArD,EAAiE;AAChE,KAAI5B,cAAc,CAAlB;;AAEA,KAAMgJ,iBAAiBpN,QAAQmN,WAAR,EAAqBpN,MAArB,CACtB,UAACgF,SAAD,EAAYmJ,YAAZ,EAA0BC,SAA1B,EAAwC;AACvC,MAAID,gBAAgBA,aAAavL,MAAb,GAAsB,CAA1C,EAA6C;AAC5C,OAAM0H,MAAMlK,QAAQ4E,SAAR,EAAmB,EAAC2B,UAAUwH,YAAX,EAAnB,CAAZ;;AAEA,OAAI7D,cAAJ,EAAuB;AACtBtF,cAAU,EAAEX,WAAZ,IAA2B;AAC1BsC,eAAUwH,YADgB;AAE1BX,YAAO,CAACY,SAAD;AAFmB,KAA3B;AAIA,IALD,MAMK;AACJpJ,cAAUsF,GAAV,EAAekD,KAAf,CAAqBjG,IAArB,CAA0B6G,SAA1B;AACA;AACD;;AAED,SAAOpJ,SAAP;AACA,EAjBqB,EAkBtB,EAlBsB,CAAvB;;AAqBA,KAAMsI,aAAaH,WAAWC,WAAX,EAAwBC,cAAxB,CAAnB;;AAEA,KAAMM,aAAaD,WAAWL,cAAX,CAAnB;;AAEA,KAAMW,aAAaF,WAAWC,iBAAX,CAAnB;;AAEA,KAAMM,UAAU,CACff,UADe,EAEfK,UAFe,EAGfK,UAHe,CAAhB;;AAMA,KAAIM,oBAAoBhB,WAAW1K,MAAX,GAAoB+K,WAAW/K,MAA/B,GAAwCoL,WAAWpL,MAA3E;;AAEA,KAAIqD,WAAWZ,MAAf,EAAuB;AACtB,MAAMkJ,aAAaN,WAAWhI,WAAWZ,MAAtB,CAAnB;AACAgJ,UAAQ9G,IAAR,CAAagH,UAAb;;AAEAD,uBAAqBC,WAAW3L,MAAhC;AACA;;AAED,QAAOmG,OAAO8D,MAAP,CACNwB,OADM,EAENC,iBAFM,CAAP;AAIA;;AAED,SAASE,YAAT,CAAsBC,IAAtB,EAA4BxL,OAA5B,EAAqC;AACpC,KAAMC,OAAO,EAAb;;AAEA,KAAMF,SAAS,IAAIxC,SAAJ,CAAciO,IAAd,CAAf;;AAEAvL,MAAKgE,MAAL,GAAcnE,YAAYC,MAAZ,EAAoBC,OAApB,CAAd;;AAEA,KAAMyL,gBAAgBxL,KAAKgE,MAAL,CAAYnD,KAAZ,GAAoBb,KAAKgE,MAAL,CAAYjD,MAAtD;;AAEAf,MAAKiG,MAAL,GAAcnG,OAAOW,WAAP,CAAmB+K,aAAnB,CAAd;;AAEA,KAAIxL,KAAKgE,MAAL,CAAY9C,aAAZ,KAA8BvC,eAAeE,MAAjD,EAAyD;AACxDmB,OAAKsJ,iBAAL,GAAyBP,oBACxB;AACC/E,WAAQhE,KAAKgE,MADd;AAECiC,WAAQjG,KAAKiG;AAFd,GADwB,EAKxBlG,QAAQoB,WALgB,CAAzB;AAOA,EARD,MASK;AACJnB,OAAKsJ,iBAAL,GAAyBtJ,KAAKiG,MAA9B;AACA;;AAEDjG,MAAKyD,QAAL,GAAgB3D,OAAOW,WAAP,CAAmB+K,aAAnB,CAAhB;;AAEAxL,MAAKsF,KAAL,GAAaxF,OAAOW,WAAP,EAAb;;AAEAT,MAAKwF,MAAL,GAAc1F,OAAOW,WAAP,EAAd;;AAEAT,MAAKyF,SAAL,GAAiB3F,OAAOW,WAAP,EAAjB;;AAEAT,MAAKwE,QAAL,GAAgBL,WAAWrE,MAAX,EAAmBE,KAAKgE,MAAL,CAAYhD,aAA/B,CAAhB;;AAEA,KAAMyK,eAAenH,sBACpBc,mBAAmBpF,KAAKsJ,iBAAxB,EAA2CtJ,KAAKgE,MAAL,CAAYnD,KAAvD,CADoB,EAEpBb,KAAKwE,QAFe,CAArB;;AAKAxE,MAAKkD,IAAL,GAAYuI,aAAavI,IAAzB;AACAlD,MAAKoE,KAAL,GAAaqH,aAAarH,KAA1B;;AAEApE,MAAK2F,KAAL,GAAa7F,OAAOW,WAAP,EAAb;;AAECuC,kBAAiBlD,MAAjB,EAAyBE,IAAzB;;AAEA,QAAOA,IAAP;AACD;;AAED,SAAS0L,cAAT,CAAwBC,MAAxB,EAAgC;AAC/B,KAAMC,kBAAkBtD,mBAAmBqD,MAAnB,CAAxB;;AAEA,KAAMjD,SAAS,EAAf;;AAEA,KAAIkD,eAAJ,EAAqB;AACpBlD,SAAOrE,IAAP,kCAAeuH,eAAf;AACA;;AAED,QAAOlD,OAAOhJ,MAAP,KAAkB,CAAlB,YAAkCgJ,MAAzC;AACA;;AAED,SAASmD,cAAT,CAAwBN,IAAxB,EAA8BxL,OAA9B,EAAuC;AACtC,QAAO,IAAI+L,OAAJ,CACN,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpB,MAAI;AACH,OAAM/I,aAAaqI,aAAaC,IAAb,EAAmBxL,OAAnB,CAAnB;;AAEA,OAAM2I,SAASgD,eAAezI,UAAf,CAAf;;AAEA,OAAIyF,iBAAJ,EAA0B;AACzBsD,mCAA6BtD,OAAOvD,IAAP,CAAY,MAAZ,CAA7B;AACA,IAFD,MAGK;AACJ4G,YAAQ;AACPE,WAAM;AACL3G,aAAOrC,WAAWqC,KAAX,UADF;AAELE,cAAQvC,WAAWuC,MAAX,UAFH;AAGLC,iBAAWxC,WAAWwC,SAAX,UAHN;AAILyG,aAAOjJ,WAAW0C,KAAX;AAJF,MADC;AAOPzC,WAAMD,WAAWC,IAPV;AAQPkB,YAAOnB,WAAWmB,KARX;AASP+H,mBAAc/G,mBAAmBnC,WAAWQ,QAA9B,EAAwCR,WAAWe,MAAX,CAAkBnD,KAA1D,CATP;AAUPkC,iBAAY;AACXZ,cAAQc,WAAWd;AADR;AAVL,KAAR;AAcA;AACD,GAxBD,CAyBA,OAAMiK,GAAN,EAAW;AACVJ,UAAOI,GAAP;AACA;AACD,EA9BK,CAAP;AAgCA;;AAED;;;;;;IAKMC,S;;;;;;;;AACL;;;;;;;;;;;;;;;;;;wBAkBMd,I,EAAMxL,O,EAAS;AACpBA,aAAUA,WAAW,EAArB;;AAEA,UAAO8L,eAAeN,IAAf,EAAqBxL,OAArB,EAA8BuM,IAA9B,CACN,UAACrJ,UAAD;AAAA,WAAgB,IAAI1F,MAAJ,CAAW0F,UAAX,CAAhB;AAAA,IADM,CAAP;AAGA;;AAED;;;;;;;;;;;;;;;;;;;;;;2BAmBS0I,M,EAAQ5L,O,EAAS;AACzB4L,YAASA,OAAOY,MAAP,EAAT;;AAEA,OAAMvL,gBAAgB5D,KAAKuO,OAAOvH,KAAP,CAAaM,MAAlB,IAA4BtH,KAAKuO,OAAOvH,KAAP,CAAaO,IAAlB,CAAlD;AACA,OAAM1D,aAAazC,YAAYC,MAA/B;AACA,OAAIyC,gBAAgBvC,eAAeC,QAAnC;;AAEAmB,aAAUA,WAAW,EAArB;;AAEA,OAAMgB,SAAS4K,OAAOzI,IAAP,CAAYxD,MAA3B;AACA,OAAMmB,QAAQ8K,OAAOzI,IAAP,CAAY,CAAZ,EAAexD,MAA7B;;AAEA,OAAMiG,QAAQgG,OAAOM,IAAP,CAAYC,KAAZ,IAAqB,EAAnC;;AAEA,OAAIhC,cAAcjF,gBAAgB0G,OAAOzI,IAAvB,CAAlB;AACA,OAAIsJ,+BAAJ;;AAEA,OAAIzM,QAAQ0M,SAAZ,EAAuB;AACtB,QACC,CAAC1M,QAAQoB,WAAT,IACAoG,OAAOxH,QAAQoB,WAAf,IAA8B/B,iBAD9B,IAEAmI,OAAOxH,QAAQoB,WAAf,IAA8B9B,iBAH/B,EAIE;AACD,WAAM,IAAI+B,KAAJ,8EAAqFrB,QAAQoB,WAA7F,CAAN;AACA;;AAEDqL,6BAAyBtC,WAAzB;AACAA,kBAActB,kBAAkBsB,WAAlB,EAA+BnK,QAAQoB,WAAvC,CAAd;;AAEAD,oBAAgBvC,eAAeE,MAA/B;AACA;;AAED,OAAM6N,uBAAuB3P,QAAQmN,WAAR,CAA7B;AACA,OAAMyC,kCAAkC5P,QAAQyP,0BAA0BtC,WAAlC,CAAxC;;AAEA,OAAMiC,eAAeR,OAAOQ,YAAP,CAAoB5P,GAApB,CACpB,UAACuI,GAAD;AAAA,WAASA,IAAIvI,GAAJ,CACR,UAACkH,QAAD,EAAc;AACb,SAAIA,aAAa,IAAjB,EAAuB;AACtB,aAAOjG,gBAAP;AACA;;AAED,SAAIiG,aAAa,EAAjB,EAAqB;AACpB,aAAO,GAAP;AACA;;AAED,YAAOA,QAAP;AACA,KAXO,CAAT;AAAA,IADoB,CAArB;;AAgBA,OAAMoH,oBAAoB9N,QAAQoP,YAAR,CAA1B;;AAEA,OAAM3H,WAAWrH,QAAQJ,QAAQ4O,OAAOzI,IAAf,EAAqB3G,GAArB,CAAyB,UAAC4G,IAAD;AAAA,WAAUA,KAAK6B,UAAf;AAAA,IAAzB,CAAR,EAA6DlI,MAA7D,CAChB,UAAC8P,UAAD,EAAa5H,UAAb,EAA4B;AAC3B,QAAI2G,OAAOvH,KAAP,CAAaM,MAAb,CAAoBM,UAApB,YAAJ,EAAmD;AAClD4H,gBAAWvI,IAAX,CAAgBsH,OAAOvH,KAAP,CAAaM,MAAb,CAAoBM,UAApB,CAAhB;AACA;;AAED,QAAI2G,OAAOvH,KAAP,CAAaO,IAAb,CAAkBK,UAAlB,YAAJ,EAAiD;AAChD4H,gBAAWvI,IAAX,CAAgBsH,OAAOvH,KAAP,CAAaO,IAAb,CAAkBK,UAAlB,CAAhB;AACA;;AAED,WAAO4H,UAAP;AACA,IAXe,EAYhB,EAZgB,CAAjB;;AAeA,OAAM3J,aAAa;AAClBe,YAAQ;AACPnD,iBADO;AAEPE,mBAFO;AAGPC,iCAHO;AAIPC,2BAJO;AAKPC;AALO,KADU;AAQlB+E,YAAQf,iBAAiBwH,oBAAjB,CARU;AASlBpD,uBAAmBpE,iBAAiByH,+BAAjB,CATD;AAUlBlJ,cAAUyB,iBAAiBiH,YAAjB,CAVQ;AAWlB7G,WAAOqG,OAAOM,IAAP,CAAY3G,KAXD;AAYlBE,YAAQmG,OAAOM,IAAP,CAAYzG,MAZF;AAalBC,eAAWkG,OAAOM,IAAP,CAAYxG,SAbL;AAclBjB,sBAdkB;AAelBmB;AAfkB,IAAnB;;AAkBA,OAAMkH,eAAe5D,aAAahG,UAAb,EAAyBlD,OAAzB,CAArB;;AAEA,OAAM+M,qBAAqBzP,MAAMkI,MAAN,CAC1BL,iBAAiBgF,WAAjB,CAD0B,EAE1B5M,UAAUsE,QAFgB,CAA3B;;AAKA,OAAMmL,2BAA2B1P,MAAMkI,MAAN,CAChCsF,kBAAkBtO,GAAlB,CACC,UAACkH,QAAD;AAAA,WAAcA,SAAS,CAAT,CAAd;AAAA,IADD,EAEE0B,IAFF,CAEO,EAFP,CADgC,EAIhC7H,UAAUsE,QAJsB,CAAjC;;AAOA,OAAMoL,oBAAoB3P,MAAMkI,MAAN,EAAgBoG,OAAOM,IAAP,CAAY3G,KAAZ,IAAqB,EAArC,UAA6ChI,UAAUsE,QAAvD,CAA1B;AACA,OAAMqL,qBAAqB5P,MAAMkI,MAAN,EAAgBoG,OAAOM,IAAP,CAAYzG,MAAZ,IAAsB,EAAtC,UAA8ClI,UAAUsE,QAAxD,CAA3B;AACA,OAAMsL,wBAAwB7P,MAAMkI,MAAN,EAAgBoG,OAAOM,IAAP,CAAYxG,SAAZ,IAAyB,EAAzC,UAAiDnI,UAAUsE,QAA3D,CAA9B;;AAEA,OAAMuL,oBAAoB9P,MAAMkI,MAAN,CAAgBf,SAASW,IAAT,CAAc,IAAd,CAAhB,SAAyC7H,UAAUsE,QAAnD,CAA1B;;AAEA,OAAMwL,oBAAoB/P,MAAMkI,MAAN,CAAgBI,KAAhB,SAA2BrI,UAAUsE,QAArC,CAA1B;;AAEA,OAAMuJ,UAAU,CACf0B,YADe,EAEfC,kBAFe,EAGfC,wBAHe,EAIfC,iBAJe,EAKfC,kBALe,EAMfC,qBANe,EAOfC,iBAPe,EAQfC,iBARe,CAAhB;;AAWA,OAAIhC,oBAAoByB,aAAanN,MAAb,GAAsBoN,mBAAmBpN,MAAzC,GACvBqN,yBAAyBrN,MADF,GACWsN,kBAAkBtN,MAD7B,GAEvBuN,mBAAmBvN,MAFI,GAEKwN,sBAAsBxN,MAF3B,GAGvByN,kBAAkBzN,MAHK,GAGI0N,kBAAkB1N,MAH9C;;AAKA,OACCiN,gCAAgCU,IAAhC,CAAqC,UAAC5J,QAAD;AAAA,WAAcA,SAAS/D,MAAT,GAAkB,CAAhC;AAAA,IAArC,CADD,EAEE;AACD,QAAM4N,cAActC,YACnB2B,+BADmB,EAEnB9B,iBAFmB,EAGnBc,OAAO5I,UAAP,IAAqB,EAHF,CAApB;;AAMAoI,YAAQ9G,IAAR,CAAaiJ,WAAb;;AAEAlC,yBAAqBkC,YAAY5N,MAAjC;AACA;;AAED,UAAOmG,OAAO8D,MAAP,CAAcwB,OAAd,EAAuBC,iBAAvB,CAAP;AACA;;;;;;AAGFmC,UAAUC,OAAOD,OAAP,GAAiBlB,SAA3B","file":"puz.js","sourcesContent":["/**\n * PUZ file parser.\n *\n * @module xpuz/parsers/puz\n * @see {@link module:xpuz/puzzle|Puzzle}\n */\n\nconst map             = require(\"lodash/map\");\nconst get             = require(\"lodash/get\");\nconst range           = require(\"lodash/range\");\nconst reverse         = require(\"lodash/reverse\");\nconst zip             = require(\"lodash/zip\");\nconst each            = require(\"lodash/each\");\nconst reduce          = require(\"lodash/reduce\");\nconst flatten         = require(\"lodash/flatten\");\nconst padStart        = require(\"lodash/padStart\");\nconst chunk           = require(\"lodash/chunk\");\nconst findKey         = require(\"lodash/findKey\");\nconst compact         = require(\"lodash/compact\");\nconst size            = require(\"lodash/size\");\nconst iconv           = require(\"iconv-lite\");\nconst PUZReader       = require(\"./puz/puz-reader\");\nconst Puzzle          = require(\"../puzzle\");\n\n\nconst BLOCK_CELL_VALUE = \".\";\n\nconst BLOCK_CELL_VALUE_REGEX = /\\./g;\n\nconst EXTENSION_HEADER_LENGTH = 8;\n\nconst HEADER_CHECKSUM_BYTE_LENGTH = 8;\n\nconst MAGIC_CHECKSUM_BYTE_LENGTH = 8;\n\nconst UNKNOWN1_BYTE_LENGTH = 2;\n\nconst UNKNOWN2_BYTE_LENGTH = 12;\n\nconst CHECKSUM_BUFFER_LENGTH = 2;\n\nconst NUMBER_OF_CLUES_BUFFER_LENGTH = 2;\n\nconst PUZZLE_TYPE_BUFFER_LENGTH = 2;\n\nconst SOLUTION_STATE_BUFFER_LENGTH = 2;\n\nconst HEADER_BUFFER_LENGTH = 52;\n\nconst EXTENSION_LENGTH_BUFFER_LENGTH = 2;\n\nconst EXTENSION_NAME_LENGTH = 4;\n\nconst PUZZLE_KEY_LENGTH = 4;\n\nconst RTBL_KEY_PADDING_WIDTH = 2;\n\nconst PUZZLE_TYPE = {\n\tNormal: 0x0001,\n\tDiagramless: 0x0401\n};\n\nconst SOLUTION_STATE = {\n\t// solution is available in plaintext\n\tUnlocked: 0x0000,\n\t// solution is locked (scrambled) with a key\n\tLocked: 0x0004\n};\n\nconst CELL_STATES = {\n\tPreviouslyIncorrect: 0x10,\n\tCurrentlyIncorrect: 0x20,\n\tAnswerGiven: 0x40,\n\tCircled: 0x80\n};\n\nconst ATOZ = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\nconst MINIMUM_KEY_VALUE = 1000;\n\nconst MAXIMUM_KEY_VALUE = 9999;\n\nfunction _doChecksum(buffer, cksum) {\n\tfor (let i = 0; i < buffer.length; i++) {\n\t\t// right-shift one with wrap-around\n\t\tconst lowbit = cksum & 0x0001;\n\n\t\tcksum = cksum >> 1;\n\n\t\tif (lowbit) {\n\t\t\t// eslint-disable-next-line no-magic-numbers\n\t\t\tcksum = cksum | 0x8000;\n\t\t}\n\n\t\t// then add in the data and clear any carried bit past 16\n\t\t// eslint-disable-next-line no-magic-numbers\n\t\tcksum = (cksum + buffer.readUInt8(i)) & 0xFFFF;\n\t}\n\n\treturn cksum;\n}\n\nfunction _readHeader(reader, options) {\n\tconst data = {};\n\n\tdata.globalChecksum = reader._readUInt16();\n\n\treader._seek(\"ACROSS&DOWN\\0\".length, { current: true });\n\n\tdata.headerChecksum = reader._readUInt16();\n\n\tdata.magicChecksum = reader._readValues(MAGIC_CHECKSUM_BYTE_LENGTH);\n\n\tdata.version = reader._readString();\n\n\tdata.unknown1 = reader._readValues(UNKNOWN1_BYTE_LENGTH);\n\n\tdata.scrambledChecksum = reader._readUInt16();\n\n\tdata.unknown2 = reader._readValues(UNKNOWN2_BYTE_LENGTH);\n\n\tdata.width = reader._readUInt8();\n\n\tdata.height = reader._readUInt8();\n\n\tdata.numberOfClues = reader._readUInt16();\n\n\tdata.puzzleType = reader._readUInt16();\n\n\tdata.solutionState = reader._readUInt16();\n\n\tif (data.solutionState === SOLUTION_STATE.Locked && !options.solutionKey) {\n\t\tthrow new Error(\"Puzzle solution is locked and no solutionKey option was provided\");\n\t}\n\n\treturn data;\n}\n\nfunction _processExtension(extension) {\n\tif (extension.name === \"GRBS\") {\n\t\textension.board = map(\n\t\t\textension.data,\n\t\t\t(b) => {\n\t\t\t\tif (b === 0) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn b - 1;\n\t\t\t}\n\t\t);\n\t}\n\n\tif (extension.name === \"RTBL\") {\n\t\textension.rebus_solutions = reduce(\n\t\t\ticonv.decode(extension.data, PUZReader.ENCODING).split(\";\"),\n\t\t\t(solutions, solutionPair) => {\n\t\t\t\tconst pair = solutionPair.split(\":\");\n\n\t\t\t\tpair[0] = parseInt(pair[0], 10);\n\n\t\t\t\tsolutions[pair[0]] = pair[1];\n\n\t\t\t\treturn solutions;\n\t\t\t},\n\t\t\t{}\n\t\t);\n\t}\n\n\tif (extension.name === \"LTIM\") {\n\t\tconst timings = iconv.decode(extension.data, PUZReader.ENCODING).split(\",\");\n\n\t\textension.timing = {\n\t\t\telapsed: parseInt(timings[0], 10),\n\t\t\trunning: timings[1] === \"0\"\n\t\t};\n\t}\n\n\tif (extension.name === \"GEXT\") {\n\t\textension.cell_states = map(\n\t\t\textension.data,\n\t\t\t(b) => {\n\t\t\t\treturn {\n\t\t\t\t\tPreviouslyIncorrect: !!(b & CELL_STATES.PreviouslyIncorrect),\n\t\t\t\t\tCurrentlyIncorrect: !!(b & CELL_STATES.CurrentlyIncorrect),\n\t\t\t\t\tAnswerGiven: !!(b & CELL_STATES.AnswerGiven),\n\t\t\t\t\tCircled: !!(b & CELL_STATES.Circled)\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t}\n\n\tif (extension.name === \"RUSR\") {\n\t\textension.user_rebus_entries = map(\n\t\t\ticonv.decode(extension.data, PUZReader.ENCODING).split(\"\\0\"),\n\t\t\t(entry) => entry === \"\" ? null : entry\n\t\t);\n\t}\n\n\treturn extension;\n}\n\nfunction _readExtension(reader) {\n\tconst extension = {};\n\n\textension.name = reader._readString(EXTENSION_NAME_LENGTH);\n\n\tconst length = reader._readUInt16();\n\n\textension.checksum = reader._readUInt16();\n\n\t// Include null byte at end\n\textension.data = reader._readValues(length + 1);\n\t// Remove null byte at the end\n\textension.data = extension.data.slice(0, -1);\n\n\treturn _processExtension(extension);\n}\n\nfunction _parseEnd(reader, data) {\n\tconst remainingLength = reader.size() - reader.tell();\n\n\tif (remainingLength >= EXTENSION_HEADER_LENGTH) {\n\t\tconst extension = _readExtension(reader);\n\n\t\tdata.extensions = data.extensions || {};\n\t\tdata.extensions[extension.name] = extension;\n\n\t\tdelete extension.name;\n\n\t\t_parseEnd(reader, data);\n\t}\n}\n\nfunction _parseExtensions(reader, puzzleData) {\n\tconst data = {};\n\n\t_parseEnd(reader, data);\n\n\tif (get(data, \"extensions.GRBS\")) {\n\t\teach(\n\t\t\tflatten(puzzleData.grid),\n\t\t\t(cell, index) => {\n\t\t\t\tconst c = cell;\n\n\t\t\t\tif (data.extensions.GRBS.board[index] === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst rebusSolution = data.extensions.RTBL.rebus_solutions[\n\t\t\t\t\tdata.extensions.GRBS.board[index]\n\t\t\t\t];\n\n\t\t\t\tc.solution = rebusSolution;\n\t\t\t}\n\t\t);\n\t}\n\n\tif (get(data, \"extensions.RUSR\")) {\n\t\tdata.extensions.RUSR.user_rebus_entries.forEach(\n\t\t\t(rusr, index) => {\n\t\t\t\tif (rusr !== null) {\n\t\t\t\t\tconst y = Math.floor(index / puzzleData.header.width);\n\t\t\t\t\tconst x = index % puzzleData.header.width;\n\n\t\t\t\t\tpuzzleData.solution[y][x] = rusr;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tpuzzleData._extensions = data.extensions;\n\n\tpuzzleData.timing = get(data, \"extensions.LTIM.timing\");\n}\n\nfunction _readClues(reader, numberOfClues) {\n\tconst clues = [];\n\n\tfor (let i = 0; i < numberOfClues; i++) {\n\t\tclues.push(reader._readString());\n\t}\n\n\treturn clues;\n}\n\nfunction _generateGridAndClues(answers, clueList) {\n\tfunction _isBlockCell(x, y) {\n\t\treturn answers[y][x] === BLOCK_CELL_VALUE;\n\t}\n\n\tconst clues = {\n\t\tacross: {},\n\t\tdown: {}\n\t};\n\n\tconst grid = [];\n\n\tconst width = answers[0].length, height = answers.length;\n\n\tlet clueCount = 0;\n\n\tlet clueListIndex = 0;\n\n\tfor (let y = 0; y < height; y++) {\n\t\tconst row = [];\n\n\t\tfor (let x = 0; x < width; x++) {\n\t\t\tconst cell = {};\n\n\t\t\tif (_isBlockCell(x, y)) {\n\t\t\t\tcell.isBlockCell = true;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcell.solution = answers[y][x];\n\n\t\t\t\tlet down = false, across = false;\n\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t\tx === 0 ||\n\t\t\t\t\t\t_isBlockCell(x - 1, y)\n\t\t\t\t\t) && (\n\t\t\t\t\t\tx + 1 < width &&\n\t\t\t\t\t\t!_isBlockCell(x + 1, y)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tacross = true;\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\t(\n\t\t\t\t\t\ty === 0 ||\n\t\t\t\t\t\t_isBlockCell(x, y - 1)\n\t\t\t\t\t) && (\n\t\t\t\t\t\ty + 1 < height &&\n\t\t\t\t\t\t!_isBlockCell(x, y + 1)\n\t\t\t\t\t)\n\t\t\t\t) {\n\t\t\t\t\tdown = true;\n\t\t\t\t}\n\n\t\t\t\tif (across || down) {\n\t\t\t\t\tcell.clueNumber = ++clueCount;\n\t\t\t\t}\n\n\t\t\t\tif (across) {\n\t\t\t\t\tclues.across[clueCount] = clueList[clueListIndex++];\n\t\t\t\t}\n\n\t\t\t\tif (down) {\n\t\t\t\t\tclues.down[clueCount] = clueList[clueListIndex++];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\n\t\t\trow.push(cell);\n\t\t}\n\n\t\tgrid.push(row);\n\t}\n\n\treturn {\n\t\tgrid,\n\t\tclues,\n\t};\n}\n\nfunction _pluckSolutions(grid) {\n\treturn grid.map(\n\t\t(row) => row.map(\n\t\t\t(cell) => {\n\t\t\t\tif (cell.isBlockCell) {\n\t\t\t\t\treturn BLOCK_CELL_VALUE;\n\t\t\t\t}\n\n\t\t\t\tif (cell.solution === null) {\n\t\t\t\t\treturn \" \";\n\t\t\t\t}\n\n\t\t\t\treturn cell.solution;\n\t\t\t}\n\t\t)\n\t);\n}\n\nfunction _flattenSolution(solution) {\n\treturn flatten(solution).map(\n\t\t(entry) => {\n\t\t\tif (entry === null) {\n\t\t\t\treturn BLOCK_CELL_VALUE;\n\t\t\t}\n\n\t\t\tif (entry === \"\") {\n\t\t\t\treturn \"-\";\n\t\t\t}\n\n\t\t\treturn entry[0];\n\t\t}\n\t).join(\"\");\n}\n\nfunction _unflattenSolution(solution, width) {\n\treturn chunk(\n\t\tsolution.split(\"\"),\n\t\twidth\n\t).map(\n\t\t(row) => row.map(\n\t\t\t(cell) => cell === \"-\" ? \"\" : cell\n\t\t)\n\t);\n}\n\nfunction _textChecksum(puzzleData, checksum) {\n\tif (puzzleData.title) {\n\t\tchecksum = _doChecksum(iconv.encode(puzzleData.title + \"\\0\", PUZReader.ENCODING), checksum);\n\t}\n\n\tif (puzzleData.author) {\n\t\tchecksum = _doChecksum(iconv.encode(puzzleData.author + \"\\0\", PUZReader.ENCODING), checksum);\n\t}\n\n\n\tif (puzzleData.copyright) {\n\t\tchecksum = _doChecksum(iconv.encode(puzzleData.copyright + \"\\0\", PUZReader.ENCODING), checksum);\n\t}\n\n\tpuzzleData.clueList.forEach(\n\t\t(clue) => {\n\t\t\tif (clue) {\n\t\t\t\tchecksum = _doChecksum(iconv.encode(clue, PUZReader.ENCODING), checksum);\n\t\t\t}\n\t\t}\n\t);\n\n\tif (puzzleData.notes) {\n\t\tchecksum = _doChecksum(iconv.encode(puzzleData.notes + \"\\0\", PUZReader.ENCODING), checksum);\n\t}\n\n\treturn checksum;\n}\n\nfunction _headerChecksum(puzzleData, checksum) {\n\tif(checksum === undefined) {\n\t\tchecksum = 0;\n\t}\n\n\tconst buffer = new Buffer(HEADER_CHECKSUM_BYTE_LENGTH);\n\n\tbuffer.writeUInt8(puzzleData.header.width, 0);\n\tbuffer.writeUInt8(puzzleData.header.height, 1);\n\t// These \"magic numbers\" are the successive byte offsets to write at\n\t/* eslint-disable no-magic-numbers */\n\tbuffer.writeUInt16LE(puzzleData.header.numberOfClues, 2);\n\tbuffer.writeUInt16LE(puzzleData.header.puzzleType, 4);\n\tbuffer.writeUInt16LE(puzzleData.header.solutionState, 6);\n\t/* eslint-enable no-magic-numbers */\n\n\treturn _doChecksum(buffer, checksum);\n}\n\nfunction _globalChecksum(puzzleData, headerChecksum) {\n\tlet checksum = headerChecksum === undefined ? _headerChecksum(puzzleData) : headerChecksum;\n\n\tlet buffer = iconv.encode(puzzleData.answer, PUZReader.ENCODING);\n\n\tchecksum = _doChecksum(buffer, checksum);\n\n\tbuffer = iconv.encode(puzzleData.solution, PUZReader.ENCODING);\n\n\tchecksum = _doChecksum(buffer, checksum);\n\n\tchecksum = _textChecksum(puzzleData, checksum);\n\n\treturn checksum;\n}\n\nfunction _magicChecksum(puzzleData) {\n\tconst headerChecksum = _headerChecksum(puzzleData);\n\tconst answerChecksum = _doChecksum(iconv.encode(puzzleData.answer, PUZReader.ENCODING));\n\tconst solutionChecksum = _doChecksum(iconv.encode(puzzleData.solution, PUZReader.ENCODING));\n\tconst textChecksum = _textChecksum(puzzleData);\n\n\tconst MAGIC_CHECKSUM_STRING = \"ICHEATED\";\n\n\tconst magicChecksum = new Buffer([\n\t\t/* eslint-disable no-magic-numbers */\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(0) ^ (headerChecksum & 0xFF),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(1) ^ (answerChecksum & 0xFF),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(2) ^ (solutionChecksum & 0xFF),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(3) ^ (textChecksum & 0xFF),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(4) ^ ((headerChecksum & 0xFF00) >> 8),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(5) ^ ((answerChecksum & 0xFF00) >> 8),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(6) ^ ((solutionChecksum & 0xFF00) >> 8),\n\t\tMAGIC_CHECKSUM_STRING.charCodeAt(7) ^ ((textChecksum & 0xFF00) >> 8)\n\t\t/* eslint-enable no-magic-numbers */\n\t]);\n\n\n\treturn magicChecksum;\n}\n\nfunction _transposeGrid(gridString, width, height) {\n\tconst data = gridString.match(new RegExp(\".{1,\" + width + \"}\", \"g\"));\n\n\treturn range(width).map(\n\t\t(c) => range(height).map(\n\t\t\t(r) => data[r][c]\n\t\t).join(\"\")\n\t).join(\"\");\n}\n\nfunction _restoreSolution(s, t) {\n\t/*\n\ts is the source string, it can contain '.'\n\tt is the target, it's smaller than s by the number of '.'s in s\n\n\tEach char in s is replaced by the corresponding\n\tchar in t, jumping over '.'s in s.\n\n\t>>> restore('ABC.DEF', 'XYZABC')\n\t'XYZ.ABC'\n\t*/\n    \n\tt = t.split(\"\");\n\n\treturn s.split(\"\").reduce(\n\t\t(arr, c) => {\n\t\t\tif (c === BLOCK_CELL_VALUE) {\n\t\t\t\tarr.push(c);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tarr.push(t.shift());\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t},\n\t\t[]\n\t).join(\"\");\n}\n\nfunction _shift(str, key) {\n\treturn str.split(\"\").map(\n\t\t(c, index) => {\n\t\t\tlet letterIndex = (ATOZ.indexOf(c) + Number(key[index % key.length])) % ATOZ.length;\n\n\t\t\tif (letterIndex < 0) {\n\t\t\t\tletterIndex = ATOZ.length + letterIndex;\n\t\t\t}\n\n\t\t\treturn ATOZ[letterIndex];\n\t\t}\n\t).join(\"\");\n}\n\nfunction _unshift(str, key) {\n\treturn _shift(\n\t\tstr,\n\t\tmap(key, (k) => -k)\n\t);\n}\n\nfunction _everyOther(str) {\n\treturn str.split(\"\").reduce(\n\t\t(arr, c, i) => {\n\t\t\t// eslint-disable-next-line no-magic-numbers\n\t\t\tif (i % 2 === 0) {\n\t\t\t\tarr.push(c);\n\t\t\t}\n\n\t\t\treturn arr;\n\t\t},\n\t\t[]\n\t).join(\"\");\n}\n\nfunction _unshuffle(str) {\n\treturn _everyOther(str.substring(1)) + _everyOther(str);\n}\n\nfunction _unscrambleString(str, key) {\n\tconst len = str.length;\n\n\treverse(padStart(key, PUZZLE_KEY_LENGTH, \"0\").split(\"\")).forEach(\n\t\t(k) => {\n\t\t\tstr = _unshuffle(str);\n\t\t\tstr = str.substring(len - k) + str.substring(0, len - k);\n\t\t\tstr = _unshift(str, key);\n\t\t}\n\t);\n\n\treturn str;\n}\n\n\nfunction _shuffle(str) {\n\t// eslint-disable-next-line no-magic-numbers\n\tconst mid = Math.floor(str.length / 2);\n\n\treturn zip(\n\t\tstr.substring(mid).split(\"\"),\n\t\tstr.substring(0, mid).split(\"\")\n\t).reduce(\n\t\t(arr, chars) => {\n\t\t\tif (chars[0] === undefined || chars[1] === undefined) {\n\t\t\t\treturn arr;\n\t\t\t}\n\n\t\t\tarr.push(chars[0] + chars[1]);\n\n\t\t\treturn arr;\n\t\t},\n\t\t[]\n\t// eslint-disable-next-line no-magic-numbers\n\t).join(\"\") + (str.length % 2 ? str[str.length - 1] : \"\");\n}\n\nfunction _scrambleString(str, key) {\n\t/*\n\tstr is the puzzle's solution in column-major order, omitting black squares:\n\ti.e. if the puzzle is:\n\t\tC A T\n\t\t# # A\n\t\t# # R\n\tsolution is CATAR\n\n\n\tKey is a 4-digit number in the range 1000 <= key <= 9999\n\n    */\n\n\teach(\n\t\tpadStart(key, PUZZLE_KEY_LENGTH, \"0\"),\n\t\t(k) => {\n\t\t\tstr = _shift(str, key);\n\t\t\tstr = str.substring(k) + str.substring(0, k);\n\t\t\tstr = _shuffle(str);\n\t\t}\n\t);\n\n\treturn str;\n}\n\nfunction _scrambledChecksum(answer, width, height) {\n\tconst transposed = _transposeGrid(\n\t\t_flattenSolution(answer),\n\t\twidth,\n\t\theight\n\t).replace(BLOCK_CELL_VALUE_REGEX, \"\");\n\n\treturn _doChecksum(iconv.encode(transposed, PUZReader.ENCODING));\n}\n\nfunction _validateChecksums(puzzleData) {\n\tconst headerChecksum = _headerChecksum(puzzleData);\n\n\tconst globalChecksum = _globalChecksum(puzzleData, headerChecksum);\n\n\tconst magicChecksum = _magicChecksum(puzzleData);\n\n\tconst checksums = {\n\t\theader: headerChecksum,\n\t\tglobal: globalChecksum,\n\t\tmagic: magicChecksum\n\t};\n\n\tconst errors = [];\n\n\tif (checksums.header !== puzzleData.header.headerChecksum) {\n\t\terrors.push(\"header checksums do not match\");\n\t}\n\n\tif (checksums.global !== puzzleData.header.globalChecksum) {\n\t\terrors.push(\"global checksums do not match\");\n\t}\n\n\tif (!checksums.magic.equals(puzzleData.header.magicChecksum)) {\n\t\terrors.push(\"magic checksums do not match\");\n\t}\n\n\teach(\n\t\tpuzzleData._extensions,\n\t\t(extension, name) => {\n\t\t\tif (extension.checksum !== _doChecksum(extension.data)) {\n\t\t\t\terrors.push(`checksum for extension ${name} does not match`);\n\t\t\t}\n\t\t}\n\t);\n\n\treturn errors;\n}\n\nfunction _scrambleSolution(solutionGrid, key) {\n\tconst height = solutionGrid.length;\n\tconst width = solutionGrid[0].length;\n\n\tlet solutionString = flatten(\n\t\t_flattenSolution(solutionGrid)\n\t).join(\"\");\n\n\tconst transposed = _transposeGrid(solutionString, width, height);\n\n\tconst data = _restoreSolution(\n\t\ttransposed,\n\t\t_scrambleString(transposed.replace(BLOCK_CELL_VALUE_REGEX, \"\"), key)\n\t);\n\n\tsolutionString = _transposeGrid(data, height, width);\n\n\treturn chunk(solutionString.split(\"\"), width);\n}\n\nfunction _unscrambleSolution(puzzleData, key) {\n\tconst transposed = _transposeGrid(\n\t\tpuzzleData.answer,\n\t\tpuzzleData.header.width,\n\t\tpuzzleData.header.height\n\t);\n\n\tconst data = _restoreSolution(\n\t\ttransposed,\n\t\t_unscrambleString(\n\t\t\ttransposed.replace(BLOCK_CELL_VALUE_REGEX, \"\"),\n\t\t\tkey\n\t\t)\n\t);\n\n\tconst result = _transposeGrid(\n\t\tdata,\n\t\tpuzzleData.header.height,\n\t\tpuzzleData.header.width\n\t);\n\n\tif (result === puzzleData.answer) {\n\t\tthrow new Error(\"Unscrambled solution is the same as the scrambled solution; incorrect key?\");\n\t}\n\n\treturn result;\n}\n\nfunction _writeHeader(puzzleData, options) {\n\tconst globalChecksumBuffer = new Buffer(CHECKSUM_BUFFER_LENGTH);\n\n\tglobalChecksumBuffer.writeUInt16LE(_globalChecksum(puzzleData));\n\n\tconst headerChecksumBuffer = new Buffer(CHECKSUM_BUFFER_LENGTH);\n\n\theaderChecksumBuffer.writeUInt16LE(_headerChecksum(puzzleData));\n\n\tconst magicChecksumBuffer = _magicChecksum(puzzleData);\n\n\tconst scrambledChecksumBuffer = new Buffer(CHECKSUM_BUFFER_LENGTH);\n\n\tif (get(options, \"scrambled\")) {\n\t\tscrambledChecksumBuffer.writeUInt16LE(\n\t\t\t_scrambledChecksum(\n\t\t\t\tpuzzleData.unscrambledAnswer,\n\t\t\t\tpuzzleData.header.width,\n\t\t\t\tpuzzleData.header.height\n\t\t\t)\n\t\t);\n\t}\n\telse {\n\t\tscrambledChecksumBuffer.fill(0x0);\n\t}\n\n\tconst numberOfCluesBuffer = new Buffer(NUMBER_OF_CLUES_BUFFER_LENGTH);\n\n\tnumberOfCluesBuffer.writeUInt16LE(puzzleData.header.numberOfClues);\n\n\tconst puzzleTypeBuffer = new Buffer(PUZZLE_TYPE_BUFFER_LENGTH);\n\n\tpuzzleTypeBuffer.writeUInt16LE(puzzleData.header.puzzleType);\n\n\tconst solutionStateBuffer = new Buffer(SOLUTION_STATE_BUFFER_LENGTH);\n\n\tsolutionStateBuffer.writeUInt16LE(puzzleData.header.solutionState);\n\n\treturn Buffer.concat(\n\t\t[\n\t\t\tglobalChecksumBuffer,\n\t\t\ticonv.encode(\"ACROSS&DOWN\\0\", PUZReader.ENCODING),\n\t\t\theaderChecksumBuffer,\n\t\t\tmagicChecksumBuffer,\n\t\t\ticonv.encode(get(options, \"version\", \"1.3\") + \"\\0\", PUZReader.ENCODING),\n\t\t\t// unknown block 1\n\t\t\tnew Buffer([0x0, 0x0]),\n\t\t\tscrambledChecksumBuffer,\n\t\t\t// unknown block 2\n\t\t\tnew Buffer(UNKNOWN2_BYTE_LENGTH).fill(0x0),\n\t\t\tnew Buffer([puzzleData.header.width]),\n\t\t\tnew Buffer([puzzleData.header.height]),\n\t\t\tnumberOfCluesBuffer,\n\t\t\tpuzzleTypeBuffer,\n\t\t\tsolutionStateBuffer\n\t\t],\n\t\tHEADER_BUFFER_LENGTH\n\t);\n}\n\nfunction _writeExtension(extensionBuffer, extensionName) {\n\tconst lengthBuffer = new Buffer(EXTENSION_LENGTH_BUFFER_LENGTH);\n\tlengthBuffer.writeUInt16LE(extensionBuffer.length);\n\n\tconst checksumBuffer = new Buffer(CHECKSUM_BUFFER_LENGTH);\n\tchecksumBuffer.writeUInt16LE(_doChecksum(extensionBuffer));\n\n\treturn Buffer.concat(\n\t\t[\n\t\t\ticonv.encode(extensionName, PUZReader.ENCODING),\n\t\t\tlengthBuffer,\n\t\t\tchecksumBuffer,\n\t\t\textensionBuffer,\n\t\t\tnew Buffer([0])\n\t\t],\n\t\tEXTENSION_NAME_LENGTH + EXTENSION_LENGTH_BUFFER_LENGTH + CHECKSUM_BUFFER_LENGTH + extensionBuffer.length + 1\n\t);\n}\n\nfunction _writeGRBS(answerArray, rebusSolutions) {\n\tconst grbsBuffer = new Buffer(\n\t\tanswerArray.map(\n\t\t\t(cell, index) => {\n\t\t\t\tconst solutionKey = findKey(\n\t\t\t\t\trebusSolutions,\n\t\t\t\t\t(solutionInfo) => solutionInfo.cells.includes(index)\n\t\t\t\t);\n\n\t\t\t\tif (solutionKey === undefined) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\treturn parseInt(solutionKey, 10) + 1;\n\t\t\t}\n\t\t)\n\t);\n\n\treturn _writeExtension(grbsBuffer, \"GRBS\");\n}\n\nfunction _writeRTBL(rebusSolutions) {\n\tconst rtblBuffer = iconv.encode(\n\t\tObject.keys(rebusSolutions).map(\n\t\t\t(key) => `${padStart(key, RTBL_KEY_PADDING_WIDTH, \" \")}:${rebusSolutions[key].solution};`\n\t\t).join(\"\"),\n\t\tPUZReader.ENCODING\n\t);\n\n\treturn _writeExtension(rtblBuffer, \"RTBL\");\n}\n\nfunction _writeRUSR(userSolutionArray) {\n\tconst rusrBuffer = iconv.encode(\n\t\tuserSolutionArray.map(\n\t\t\t(solution) => {\n\t\t\t\tif (solution.length > 1) {\n\t\t\t\t\treturn `${solution}\\0`;\n\t\t\t\t}\n\n\t\t\t\treturn \"\\0\";\n\t\t\t}\n\t\t).join(\"\"),\n\t\tPUZReader.ENCODING\n\t);\n\n\treturn _writeExtension(rusrBuffer, \"RUSR\");\n}\n\nfunction _writeLTIM(timing) {\n\treturn _writeExtension(\n\t\ticonv.encode(\n\t\t\t`${timing.elapsed},${timing.running ? \"1\" : \"0\"}`,\n\t\t\tPUZReader.ENCODING\n\t\t),\n\t\t\"LTIM\"\n\t);\n}\n\nfunction _writeRebus(answerArray, userSolutionArray, extensions) {\n\tlet solutionKey = 0;\n\n\tconst rebusSolutions = flatten(answerArray).reduce(\n\t\t(solutions, cellSolution, cellIndex) => {\n\t\t\tif (cellSolution && cellSolution.length > 1) {\n\t\t\t\tconst key = findKey(solutions, {solution: cellSolution});\n\n\t\t\t\tif (key === undefined) {\n\t\t\t\t\tsolutions[++solutionKey] = {\n\t\t\t\t\t\tsolution: cellSolution,\n\t\t\t\t\t\tcells: [cellIndex]\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tsolutions[key].cells.push(cellIndex);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn solutions;\n\t\t},\n\t\t{}\n\t);\n\n\tconst grbsBuffer = _writeGRBS(answerArray, rebusSolutions);\n\n\tconst rtblBuffer = _writeRTBL(rebusSolutions);\n\n\tconst rusrBuffer = _writeRUSR(userSolutionArray);\n\n\tconst buffers = [\n\t\tgrbsBuffer,\n\t\trtblBuffer,\n\t\trusrBuffer,\n\t];\n\n\tlet totalBufferLength = grbsBuffer.length + rtblBuffer.length + rusrBuffer.length;\n\n\tif (extensions.timing) {\n\t\tconst ltimBuffer = _writeLTIM(extensions.timing);\n\t\tbuffers.push(ltimBuffer);\n\n\t\ttotalBufferLength += ltimBuffer.length;\n\t}\n\n\treturn Buffer.concat(\n\t\tbuffers,\n\t\ttotalBufferLength\n\t);\n}\n\nfunction _parsePuzzle(path, options) {\n\tconst data = {};\n\n\tconst reader = new PUZReader(path);\n\n\tdata.header = _readHeader(reader, options);\n\n\tconst numberOfCells = data.header.width * data.header.height;\n\n\tdata.answer = reader._readString(numberOfCells);\n\n\tif (data.header.solutionState === SOLUTION_STATE.Locked) {\t\t\t\t\t\t\n\t\tdata.unscrambledAnswer = _unscrambleSolution(\n\t\t\t{\n\t\t\t\theader: data.header,\n\t\t\t\tanswer: data.answer\n\t\t\t},\n\t\t\toptions.solutionKey\n\t\t);\n\t}\n\telse {\n\t\tdata.unscrambledAnswer = data.answer;\n\t}\n\n\tdata.solution = reader._readString(numberOfCells);\n\n\tdata.title = reader._readString();\n\n\tdata.author = reader._readString();\n\n\tdata.copyright = reader._readString();\n\n\tdata.clueList = _readClues(reader, data.header.numberOfClues);\n\n\tconst gridAndClues = _generateGridAndClues(\n\t\t_unflattenSolution(data.unscrambledAnswer, data.header.width),\n\t\tdata.clueList\n\t);\n\n\tdata.grid = gridAndClues.grid;\n\tdata.clues = gridAndClues.clues;\n\n\tdata.notes = reader._readString();\n\n\t _parseExtensions(reader, data);\n\n\t return data;\n}\n\nfunction validatePuzzle(puzzle) {\n\tconst checksumResults = _validateChecksums(puzzle);\n\n\tconst errors = [];\n\n\tif (checksumResults) {\n\t\terrors.push(...checksumResults);\n\t}\n\n\treturn errors.length === 0 ? undefined : errors;\n}\n\nfunction _getPuzzleData(path, options) {\n\treturn new Promise(\n\t\t(resolve, reject) => {\n\t\t\ttry {\n\t\t\t\tconst puzzleData = _parsePuzzle(path, options);\n\n\t\t\t\tconst errors = validatePuzzle(puzzleData);\n\n\t\t\t\tif (errors !== undefined) {\n\t\t\t\t\treject(`Invalid puzzle:\\n\\t${errors.join(\"\\n\\t\")}`);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tresolve({\n\t\t\t\t\t\tinfo: {\n\t\t\t\t\t\t\ttitle: puzzleData.title || undefined,\n\t\t\t\t\t\t\tauthor: puzzleData.author || undefined,\n\t\t\t\t\t\t\tcopyright: puzzleData.copyright || undefined,\n\t\t\t\t\t\t\tintro: puzzleData.notes || undefined,\n\t\t\t\t\t\t},\n\t\t\t\t\t\tgrid: puzzleData.grid,\n\t\t\t\t\t\tclues: puzzleData.clues,\n\t\t\t\t\t\tuserSolution: _unflattenSolution(puzzleData.solution, puzzleData.header.width),\n\t\t\t\t\t\textensions: {\n\t\t\t\t\t\t\ttiming: puzzleData.timing\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t}\n\t);\n}\n\n/**\n * Parser class for PUZ-formatted puzzles.\n *\n * @constructor\n */\nclass PUZParser {\n\t/**\n\t * Parses a file in .puz format into a {@link module:xpuz/puzzle~Puzzle|Puzzle} object.\n\t *\n\t * @memberOf module:xpuz/parsers/puz~PUZParser\n\t * @function\n\t * @instance\n\t *\n\t * @param {string|external:Buffer|ArrayBuffer} path - the .puz file to parse, either as a file path\n\t *\t(strong) or a {@link external:Buffer|Buffer} or {@link external:ArrayBuffer|ArrayBuffer} containing the puzzle\n\t *\tcontent.\n\t * @param {object} [options] - an object of options to affect the parsing\n\t * @param {Number} [options.solutionKey] - an integer between 1000 and 9999, inclusive, to use to unlock\n\t *\tthe puzzle's solution if the solution is locked. If the solution is not locked, this is ignored.\n\t *\n\t * @throws if the puzzle is locked and an invalid (or no) `options.solutionKey` was provided\n\t *\n\t * @returns {external:Bluebird} a promise that resolves with the {@link module:xpuz/puzzle~Puzzle|Puzzle} object \n\t */\n\tparse(path, options) {\n\t\toptions = options || {};\n\n\t\treturn _getPuzzleData(path, options).then(\n\t\t\t(puzzleData) => new Puzzle(puzzleData)\n\t\t);\n\t}\n\n\t/**\n\t * Given a {@link module:xpuz/puzzle~Puzzle|Puzzle} object, returns a {@link external:Buffer|Buffer}\n\t * containing the puzzle in .puz format.\n\t *\n\t * @memberOf module:xpuz/parsers/puz~PUZParser\n\t * @function\n\t * @instance\n\t *\n\t * @param {module:xpuz/puzzle~Puzzle} puzzle - the puzzle to convert to .puz content.\n\t * @param {object} [options] - an object containing additional options for the conversion\n\t * @param {boolean} [options.scrambled] - if true, the puzzle's solution will be scrambled\n\t * @param {Number} [options.solutionKey] - the solution key with which to scramble the solution. \n\t *\tIf `options.scrambled` is true, this is required.\n\t *\n\t * @throws if `options.scrambled` is true but `options.solutionKey` is not a 4-digit integer\n\t *\t(between 1000 and 9999, inclusive).\n\t *\n\t * @returns {external:Buffer} a Buffer containing the .puz content. \n\t */\n\tgenerate(puzzle, options) {\n\t\tpuzzle = puzzle.toJSON();\n\n\t\tconst numberOfClues = size(puzzle.clues.across) + size(puzzle.clues.down);\n\t\tconst puzzleType = PUZZLE_TYPE.Normal;\n\t\tlet solutionState = SOLUTION_STATE.Unlocked;\n\n\t\toptions = options || {};\n\n\t\tconst height = puzzle.grid.length;\n\t\tconst width = puzzle.grid[0].length;\n\n\t\tconst notes = puzzle.info.intro || \"\";\n\n\t\tlet answerArray = _pluckSolutions(puzzle.grid);\n\t\tlet unscrambledAnswerArray;\n\n\t\tif (options.scrambled) {\n\t\t\tif (\n\t\t\t\t!options.solutionKey ||\n\t\t\t\tNumber(options.solutionKey) < MINIMUM_KEY_VALUE ||\n\t\t\t\tNumber(options.solutionKey) > MAXIMUM_KEY_VALUE\n\t\t\t) {\n\t\t\t\tthrow new Error(`Must specify a solution key that is an integer >= 1000 and <= 9999; was ${options.solutionKey}`);\n\t\t\t}\n\n\t\t\tunscrambledAnswerArray = answerArray;\n\t\t\tanswerArray = _scrambleSolution(answerArray, options.solutionKey);\n\n\t\t\tsolutionState = SOLUTION_STATE.Locked;\n\t\t}\n\n\t\tconst flattenedAnswerArray = flatten(answerArray);\n\t\tconst flattenedUnscrambledAnswerArray = flatten(unscrambledAnswerArray || answerArray);\n\n\t\tconst userSolution = puzzle.userSolution.map(\n\t\t\t(row) => row.map(\n\t\t\t\t(solution) => {\n\t\t\t\t\tif (solution === null) {\n\t\t\t\t\t\treturn BLOCK_CELL_VALUE;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (solution === \"\") {\n\t\t\t\t\t\treturn \"-\";\n\t\t\t\t\t}\n\n\t\t\t\t\treturn solution;\n\t\t\t\t}\n\t\t\t)\n\t\t);\n\n\t\tconst userSolutionArray = flatten(userSolution);\n\n\t\tconst clueList = compact(flatten(puzzle.grid).map((cell) => cell.clueNumber)).reduce(\n\t\t\t(cluesArray, clueNumber) => {\n\t\t\t\tif (puzzle.clues.across[clueNumber] !== undefined) {\n\t\t\t\t\tcluesArray.push(puzzle.clues.across[clueNumber]);\n\t\t\t\t}\n\n\t\t\t\tif (puzzle.clues.down[clueNumber] !== undefined) {\n\t\t\t\t\tcluesArray.push(puzzle.clues.down[clueNumber]);\n\t\t\t\t}\n\n\t\t\t\treturn cluesArray;\n\t\t\t},\n\t\t\t[]\n\t\t);\n\n\t\tconst puzzleData = {\n\t\t\theader: {\n\t\t\t\twidth,\n\t\t\t\theight,\n\t\t\t\tnumberOfClues,\n\t\t\t\tpuzzleType,\n\t\t\t\tsolutionState\n\t\t\t},\n\t\t\tanswer: _flattenSolution(flattenedAnswerArray),\n\t\t\tunscrambledAnswer: _flattenSolution(flattenedUnscrambledAnswerArray),\n\t\t\tsolution: _flattenSolution(userSolution),\n\t\t\ttitle: puzzle.info.title,\n\t\t\tauthor: puzzle.info.author,\n\t\t\tcopyright: puzzle.info.copyright,\n\t\t\tclueList,\n\t\t\tnotes\n\t\t};\n\n\t\tconst headerBuffer = _writeHeader(puzzleData, options);\n\n\t\tconst answerStringBuffer = iconv.encode(\n\t\t\t_flattenSolution(answerArray),\n\t\t\tPUZReader.ENCODING\n\t\t);\n\n\t\tconst userSolutionStringBuffer = iconv.encode(\n\t\t\tuserSolutionArray.map(\n\t\t\t\t(solution) => solution[0]\n\t\t\t).join(\"\"),\n\t\t\tPUZReader.ENCODING\n\t\t);\n\n\t\tconst titleStringBuffer = iconv.encode(`${puzzle.info.title || \"\"}\\0`, PUZReader.ENCODING);\n\t\tconst authorStringBuffer = iconv.encode(`${puzzle.info.author || \"\"}\\0`, PUZReader.ENCODING);\n\t\tconst copyrightStringBuffer = iconv.encode(`${puzzle.info.copyright || \"\"}\\0`, PUZReader.ENCODING);\n\n\t\tconst cluesStringBuffer = iconv.encode(`${clueList.join(\"\\0\")}\\0`, PUZReader.ENCODING);\n\n\t\tconst notesStringBuffer = iconv.encode(`${notes}\\0`, PUZReader.ENCODING);\n\n\t\tconst buffers = [\n\t\t\theaderBuffer,\n\t\t\tanswerStringBuffer,\n\t\t\tuserSolutionStringBuffer,\n\t\t\ttitleStringBuffer,\n\t\t\tauthorStringBuffer,\n\t\t\tcopyrightStringBuffer,\n\t\t\tcluesStringBuffer,\n\t\t\tnotesStringBuffer,\n\t\t];\n\n\t\tlet totalBufferLength = headerBuffer.length + answerStringBuffer.length +\n\t\t\tuserSolutionStringBuffer.length + titleStringBuffer.length +\n\t\t\tauthorStringBuffer.length + copyrightStringBuffer.length +\n\t\t\tcluesStringBuffer.length + notesStringBuffer.length;\n\n\t\tif (\n\t\t\tflattenedUnscrambledAnswerArray.some((solution) => solution.length > 1)\n\t\t) {\n\t\t\tconst rebusBuffer = _writeRebus(\n\t\t\t\tflattenedUnscrambledAnswerArray,\n\t\t\t\tuserSolutionArray,\n\t\t\t\tpuzzle.extensions || {}\n\t\t\t);\n\n\t\t\tbuffers.push(rebusBuffer);\n\n\t\t\ttotalBufferLength += rebusBuffer.length;\n\t\t}\n\n\t\treturn Buffer.concat(buffers, totalBufferLength);\n\t}\n}\n\nexports = module.exports = PUZParser;\n"]}