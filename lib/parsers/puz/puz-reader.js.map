{"version":3,"sources":["../../../src/parsers/puz/puz-reader.js"],"names":["BufferReader","require","iconv","ENCODING","INT16_BYTE_COUNT","INT32_BYTE_COUNT","DEFAULT_STRING_BUFFER_LENGTH","PUZReader","puz","_readValues","length","_bufferReader","nextBuffer","_seek","position","relativeTo","start","seek","current","move","_readUInt8","readUInt8","_readUInt16","readUInt16LE","_readUInt32","readUInt32LE","_readString","bufferLength","size","currentPosition","tell","buffer","str","decode","nullIndex","indexOf","nullOffset","substring","_bufferSize","_buffer","Buffer","ArrayBuffer","Uint8Array","module","exports"],"mappings":"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","file":"puz-reader.js","sourcesContent":["const BufferReader = require(\"buffer-reader\");\nconst iconv        = require(\"iconv-lite\");\n\nconst ENCODING = \"ISO-8859-1\";\n\nconst INT16_BYTE_COUNT = 2;\n\nconst INT32_BYTE_COUNT = 4;\n\nconst DEFAULT_STRING_BUFFER_LENGTH = 20;\n\nclass PUZReader {\n\tstatic ENCODING = ENCODING\n\n\tconstructor(puz) {\n\t\tlet _buffer;\n\n\t\tif (puz instanceof Buffer) {\n\t\t\t// Already a buffer\n\t\t\t_buffer = puz;\n\t\t}\n\t\telse if (puz instanceof ArrayBuffer) {\n\t\t\t// ArrayBuffer--probably from client-side JS\n\t\t\t_buffer = new Buffer(new Uint8Array(puz));\n\t\t}\n\n\t\tthis._bufferReader = new BufferReader(_buffer);\n\n\t\tthis._bufferSize = _buffer.length;\n\t}\n\n\t_readValues = (length) => this._bufferReader.nextBuffer(length)\n\n\t_seek = (position, relativeTo) => {\n\t\trelativeTo = relativeTo || { start: true };\n\n\t\tif (relativeTo.start) {\n\t\t\tthis._bufferReader.seek(position);\n\t\t}\n\t\telse if (relativeTo.current) {\n\t\t\tthis._bufferReader.move(position);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t_readUInt8 = () => this._readValues(1).readUInt8(0)\n\n\t_readUInt16 = () => this._readValues(INT16_BYTE_COUNT).readUInt16LE(0)\n\n\t_readUInt32 = () => this._readValues(INT32_BYTE_COUNT).readUInt32LE(0)\n\n\t_readString = (length) => {\n\t\tlet bufferLength = length || DEFAULT_STRING_BUFFER_LENGTH;\n\n\t\tconst size = this.size();\n\t\tconst currentPosition = this.tell();\n\n\t\tif (currentPosition + bufferLength > size) {\n\t\t\tbufferLength = size - currentPosition;\n\t\t}\n\n\t\tif (bufferLength === 0) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst buffer = this._readValues(bufferLength);\n\t\tlet str = iconv.decode(buffer, ENCODING);\n\n\t\tif (length) {\n\t\t\treturn str;\n\t\t}\n\n\t\tconst nullIndex = str.indexOf(\"\\0\");\n\n\t\tif (nullIndex >= 0) {\n\t\t\tconst nullOffset = nullIndex - str.length;\n\n\t\t\tif (nullOffset < 0) {\n\t\t\t\tthis._seek(nullOffset + 1, { current: true });\n\n\t\t\t\tstr = str.substring(0, nullIndex);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tstr = str + this._readString();\n\t\t}\n\n\t\treturn str;\n\t}\n\n\tsize = () => this._bufferSize\n\n\ttell = () => this._bufferReader.tell()\n}\n\nmodule.exports = exports = PUZReader;\n"]}