{"version":3,"sources":["../src/puzzle.js"],"names":["reduce","require","isEqual","PuzzleMixin","Puzzle","grid","clues","userSolution","info","extensions","toJSON","clone","map","row","cell","Object","assign","across","cloned","clue","clueNumber","down","JSON","parse","stringify","processGrid","title","author","copyright","publisher","difficulty","intro","isBlockCell","constructor","equalityTest","exports","module"],"mappings":"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","file":"puzzle.js","sourcesContent":["const reduce          = require(\"lodash/reduce\");\nconst isEqual         = require(\"lodash/isEqual\");\nconst PuzzleMixin     = require(\"./puzzle-mixin\");\n\n/**\n * Info object\n *\n * @typedef PuzzleInfo\n *\n * @memberof xpuz.Puzzle\n *\n * @prop {?string} title - the title of the puzzle\n * @prop {?string} author - the author of the puzzle\n * @prop {?string} publisher - the publisher of the puzzle\n * @prop {?string} copyright - the copyright of the puzzle\n * @prop {?string} intro - the introductory text of the puzzle\n * @prop {?*} difficulty - the difficulty level of the puzzle\n */\n\n/**\n * Represents a puzzle object\n *\n * @memberof xpuz\n * @mixes xpuz.PuzzleMixin\n */\nclass Puzzle {\n\t/**\n\t * @param {object} args - the constructor args\n\t * @param {Types.Grid} args.grid - a two-dimensional array representing the puzzle grid\n\t * @param {{across: object<number, string>, down: object<number, string>}} args.clues - a list of clues\n\t *\tfor across and down, with each collection having the key as the clue number and the value as the clue\n\t *\ttext (e.g. `{across: { 3: \"some clue\" }}`)\n\t * @param {Array<Array<?string>>} [args.userSolution] - the currently filled in guesses of the user stored with this\n\t *\tpuzzle instance. Two dimensional array with the same dimensions as `grid`, where each cell is either a string\n\t *\tor `null` (for block cells)\n\t * @param {xpuz.Puzzle.PuzzleInfo} [args.info] - information about the puzzle\n\t * @param {object} [args.extensions] - extra, possibly implementation-specific information about the puzzle, such as timer\n\t *\tinformation\n\t */\n\tconstructor({\n\t\tgrid,\n\t\tclues,\n\t\tuserSolution,\n\t\tinfo,\n\t\textensions\n\t}) {\n\t\t/**\n\t\t * The definition of the puzzle grid. It is represented as an array of rows, so\n\t\t *\t`grid[0]` is the first row of the puzzle.\n\t\t *\n\t\t * @type Array<Array<Types.GridCell>>\n\t\t * @instance\n\t\t */\n\t\tthis.grid = Puzzle.processGrid(grid || []); // processGrid() is defined in PuzzleMixin\n\t\t\n\t\t/**\n\t\t * Listing of clues for the puzzle\n\t\t *\n\t\t * @type object\n\t\t * @instance\n\t\t *\n\t\t * @property {object} across - an object mapping clue numbers to clue texts for across clues\n\t\t * @property {object} down - an object mapping clue numbers to clue texts for down clues\n\t\t */\n\t\tthis.clues = clues || {\n\t\t\tacross: {},\n\t\t\tdown: {},\n\t\t};\n\n\t\tinfo = info || {};\n\n\t\t/**\n\t\t * An object of various puzzle information, such as author, title, copyright, etc.\n\t\t *\n\t\t * @type object\n\t\t * @instance\n\t\t *\n\t\t * @property {string} [title] - the title of the puzzle\n\t\t * @property {string} [author] - the author of the puzzle\n\t\t * @property {string} [publisher] - the publisher of the puzzle\n\t\t * @property {string} [copyright] - the copyright text of the puzzle\n\t\t * @property {*} [difficulty] - the difficulty level of the puzzle\n\t\t * @property {string} [intro] - the introductory text of the puzzle\n\t\t */\n\t\tthis.info = {\n\t\t\ttitle: info.title || \"\",\n\t\t\tauthor: info.author || \"\",\n\t\t\tcopyright: info.copyright || \"\",\n\t\t\tpublisher: info.publisher || \"\",\n\t\t\tdifficulty: info.difficulty || \"\",\n\t\t\tintro: info.intro || \"\",\n\t\t};\n\n\t\t/**\n\t\t * A structure representing the current solution as the user has filled it out.\n\t\t *\tThe structure is similar to {@link xpuz.Puzzle#grid|grid}, but\n\t\t *\teach item is a string containing the user's current answer--an empty string\n\t\t *\tif the corresponding grid cell is not filled in, a non-empty string if it's\n\t\t *\tfilled in.\n\t\t *\n\t\t * @type Array<string[]>\n\t\t * @instance\n\t\t */\n\t\tthis.userSolution = userSolution || grid.map(\n\t\t\t(row) => row.map(\n\t\t\t\t(cell) => cell.isBlockCell ? null : \"\"\n\t\t\t)\n\t\t);\n\n\t\t/**\n\t\t * A collection of extra, possibly implementation-dependent data about the puzzle,\n\t\t * such as timer information.\n\t\t *\n\t\t * @type object\n\t\t * @instance\n\t\t */\n\t\tthis.extensions = extensions || {};\n\t}\n\n\t/**\n\t * Returns this puzzle as a plain Javascript object, suitable for serializing to JSON.\n\t *\n\t * @method\n\t *\n\t * @returns {object} object representation of this puzzle object\n\t */\n\ttoJSON = () => {\n\t\treturn {\n\t\t\tgrid: this.grid,\n\t\t\tclues: this.clues,\n\t\t\tuserSolution: this.userSolution,\n\t\t\tinfo: this.info,\n\t\t\textensions: this.extensions,\n\t\t};\n\t}\n\n\t/**\n\t * Returns a deep copy of this puzzle.\n\t *\n\t * @method\n\t *\n\t * @returns {xpuz.Puzzle} cloned Puzzle\n\t */\n\tclone = () => {\n\t\treturn new Puzzle(\n\t\t\t{\n\t\t\t\tgrid: this.grid.map(\n\t\t\t\t\t(row) => row.map(\n\t\t\t\t\t\t(cell) => Object.assign({}, cell) // Clone (shallow) cell object\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tclues: {\n\t\t\t\t\tacross: reduce(\n\t\t\t\t\t\tthis.clues.across,\n\t\t\t\t\t\t(cloned, clue, clueNumber) => {\n\t\t\t\t\t\t\tcloned[clueNumber] = clue;\n\t\t\n\t\t\t\t\t\t\treturn cloned;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t),\n\t\t\t\t\tdown: reduce(\n\t\t\t\t\t\tthis.clues.down,\n\t\t\t\t\t\t(cloned, clue, clueNumber) => {\n\t\t\t\t\t\t\tcloned[clueNumber] = clue;\n\t\t\n\t\t\t\t\t\t\treturn cloned;\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{}\n\t\t\t\t\t),\n\t\t\t\t},\n\t\t\t\tuserSolution: this.userSolution.map(\n\t\t\t\t\t(row) => row.map(\n\t\t\t\t\t\t(cell) => cell // Values in userSolution are just strings\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tinfo: Object.assign({}, this.info),\n\t\t\t\textensions: JSON.parse(JSON.stringify(this.extensions)), // Deep clone\n\t\t\t}\n\t\t);\n\t}\n}\n\nPuzzleMixin({\n\tconstructor: Puzzle,\n\tequalityTest: isEqual,\n});\n\nexports = module.exports = Puzzle;\n"]}