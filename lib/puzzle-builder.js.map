{"version":3,"sources":["../src/puzzle-builder.js"],"names":["_","require","Puzzle","_closeCell","builder","_openRow","_cell","push","_closeRow","_grid","_addCell","options","isBlockCell","solution","PuzzleBuilder","_clues","across","down","_clueArrays","prototype","Object","create","addRow","configurable","value","addCell","Error","solutionLetter","addBlockCell","addAcrossClues","clues","each","clueText","clueNumber","addAcrossClue","addDownClues","addDownClue","build","maxRowLength","row","length","addBlocks","grid","toString","exports","module"],"mappings":"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","file":"puzzle-builder.js","sourcesContent":["\n\nconst _      = require(\"lodash\");\nconst Puzzle = require(\"./puzzle\");\n\nfunction _closeCell(builder) {\n\tif (!builder._openRow || !builder._cell) {\n\t\treturn;\n\t}\n\n\tbuilder._openRow.push(builder._cell);\n\n\tdelete builder._cell;\n}\n\nfunction _closeRow(builder) {\n\tif (!builder._openRow) {\n\t\treturn;\n\t}\n\n\t_closeCell(builder);\n\n\tbuilder._grid.push(builder._openRow);\n\n\tdelete builder._openRow;\n}\n\nfunction _addCell(builder, options) {\n\toptions = options || {};\n\n\t_closeCell(builder);\n\n\tbuilder._cell = {};\n\n\tif (options.isBlockCell) {\n\t\tbuilder._cell.isBlockCell = true;\n\t}\n\n\tif (options.solution) {\n\t\tbuilder._cell.solution = options.solution;\n\t}\n}\n\nfunction PuzzleBuilder() {\n\tconst builder = this;\n\n\tbuilder._grid = [];\n\n\tbuilder._clues = {\n\t\tacross: {},\n\t\tdown: {}\n\t};\n\n\tbuilder._clueArrays = {\n\t\tacross: [],\n\t\tdown: [],\n\t};\t\n}\n\nPuzzleBuilder.prototype = Object.create(Object.prototype, {\n\taddRow: {\n\t\tconfigurable: true,\n\t\tvalue: function() {\n\t\t\tconst builder = this;\n\n\t\t\t_closeRow(builder);\n\n\t\t\tbuilder._openRow = [];\n\n\t\t\treturn builder;\n\t\t}\n\t},\n\n\taddCell: {\n\t\tconfigurable: true,\n\t\tvalue: function() {\n\t\t\tconst builder = this;\n\t\t\t\n\t\t\tif (!builder._openRow) {\n\t\t\t\tthrow new Error(\"`addCell` called without an open row\");\n\t\t\t}\n\n\t\t\t_addCell(builder);\n\n\t\t\treturn builder;\n\t\t}\n\t},\n\n\tsolution: {\n\t\tconfigurable: true,\n\t\tvalue: function(solutionLetter) {\n\t\t\tconst builder = this;\n\n\t\t\tif (!builder._cell) {\n\t\t\t\tthrow new Error(\"`solution` called without a cell\");\n\t\t\t}\n\n\t\t\tbuilder._cell.solution = solutionLetter;\n\n\t\t\treturn builder;\n\t\t}\n\t},\n\n\taddBlockCell: {\n\t\tconfigurable: true,\n\t\tvalue: function() {\n\t\t\tconst builder = this;\n\t\t\t\n\t\t\tif (!builder._openRow) {\n\t\t\t\tthrow new Error(\"`addBlockCell` called without an open row\");\n\t\t\t}\n\n\t\t\t_addCell(builder, {\n\t\t\t\tisBlockCell: true\n\t\t\t});\n\n\t\t\treturn builder;\n\t\t}\n\t},\n\n\taddAcrossClues: {\n\t\tconfigurable: true,\n\t\tvalue: function(clues) {\n\t\t\tconst builder = this;\n\n\t\t\t_.each(\n\t\t\t\tclues,\n\t\t\t\tfunction(clueText, clueNumber) {\n\t\t\t\t\tbuilder._clues.across[clueNumber] = clueText;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn builder;\n\t\t}\n\t},\n\n\taddAcrossClue: {\n\t\tconfigurable: true,\n\t\tvalue: function(clueNumber, clueText) {\n\t\t\tconst builder = this;\n\n\t\t\tconst clues = {};\n\n\t\t\tclues[clueNumber] = clueText;\n\n\t\t\treturn builder.addAcrossClues(clues);\n\t\t}\n\t},\n\n\taddDownClues: {\n\t\tconfigurable: true,\n\t\tvalue: function(clues) {\n\t\t\tconst builder = this;\n\n\t\t\t_.each(\n\t\t\t\tclues,\n\t\t\t\tfunction(clueText, clueNumber) {\n\t\t\t\t\tbuilder._clues.down[clueNumber] = clueText;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn builder;\n\t\t}\n\t},\n\n\taddDownClue: {\n\t\tconfigurable: true,\n\t\tvalue: function(clueNumber, clueText) {\n\t\t\tconst builder = this;\n\n\t\t\tconst clues = {};\n\n\t\t\tclues[clueNumber] = clueText;\n\n\t\t\treturn builder.addDownClues(clues);\n\t\t}\n\t},\n\n\tbuild: {\n\t\tconfigurable: true,\n\t\tvalue: function() {\n\t\t\tconst builder = this;\n\n\t\t\t_closeRow(builder);\n\n\t\t\tlet maxRowLength = 0;\n\n\t\t\t_.each(\n\t\t\t\tbuilder._grid,\n\t\t\t\tfunction(row) {\n\t\t\t\t\tif (row.length > maxRowLength) {\n\t\t\t\t\t\tmaxRowLength = row.length;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t_.each(\n\t\t\t\tbuilder._grid,\n\t\t\t\tfunction(row) {\n\t\t\t\t\tif (row.length < maxRowLength) {\n\t\t\t\t\t\tbuilder._openRow = row;\n\n\t\t\t\t\t\tbuilder.addBlocks(maxRowLength - row.length + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn new Puzzle({\n\t\t\t\tgrid: builder._grid,\n\t\t\t\tclues: builder._clues\n\t\t\t});\n\t\t}\n\t},\n\ttoString: {\n\t\tconfigurable: true,\n\t\tvalue: function() {\n\t\t\treturn \"[object PuzzleBuilder]\";\n\t\t}\n\t},\n});\n\nexports = module.exports = PuzzleBuilder;\n"]}